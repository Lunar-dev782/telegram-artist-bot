import os
import re
import time
import json
import random
import asyncio
import logging
import traceback
from datetime import datetime, timedelta
from typing import List  

from supabase import create_client, Client

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramNotFound,
    TelegramRetryAfter,
)
from aiogram.types import (
    Message,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,  
    error_event,
    ReplyKeyboardRemove, 
)

from aiogram.types.error_event import ErrorEvent

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7645134499:AAFRfwsn7dr5W2m81gCJPwX944PRqk-sjEc"
ADMIN_CHAT_ID = -1002802098163  
MAIN_CHAT_ID = -1002865535470

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bobot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
router = Router()  

# üîå –î–∞–Ω—ñ –¥–ª—è Supabase
SUPABASE_URL = "https://clbcovdeoahrmxaoijyt.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYmNvdmRlb2Focm14YW9panl0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNTc4NTAsImV4cCI6MjA2NzczMzg1MH0.dxwJhTZ9ei4dOnxmCvGztb8pfUqTlprfd0-woF6Y-lY"

supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# üìã –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    category = State()
    description = State()
    socials = State()
    images = State()

# üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —ó—Ö –æ–ø–∏—Å–∏
CATEGORIES = {
    "üêæ –ê–¥–æ–ø—Ç–∏": "–ü–æ—Å—Ç–∏ –ø—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤, —è–∫–∏—Ö –≤–∏ –ø—Ä–æ–ø–æ–Ω—É—î—Ç–µ –¥–ª—è –∞–¥–æ–ø—Ü—ñ—ó.",
    "üßµ –†–µ–∫–≤–µ—Å—Ç–∏": "–ó–∞–ø–∏—Ç–∏ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∞–±–æ —ñ–Ω—à–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
    "üé® –ö–æ–º—ñ—à—ñ / –ü—Ä–∞–π—Å–∏": "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –ø–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏ (–∫–æ–º—ñ—à–µ–Ω–∏, –ø—Ä–∞–π—Å–∏).",
    "üéÅ –õ–æ—Ç–µ—Ä–µ—ó / –ö–æ–Ω–∫—É—Ä—Å–∏": "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –ª–æ—Ç–µ—Ä–µ—ó –∞–±–æ –∫–æ–Ω–∫—É—Ä—Å–∏.",
    "üì£ –°–∞–º–æ–ø—ñ–∞—Ä": "–ü—Ä–æ–º–æ—Ü—ñ—è –≤–∞—à–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —á–∏ –ø—Ä–æ—Ñ—ñ–ª—é.",
    "ü§ù DTIYS": "–ß–µ–ª–µ–Ω–¥–∂—ñ 'Draw This In Your Style'.",
    "üìÖ –Ü–≤–µ–Ω—Ç–∏": "–ê–Ω–æ–Ω—Å–∏ –ø–æ–¥—ñ–π, —Å—Ç—Ä—ñ–º—ñ–≤ —á–∏ —ñ–Ω—à–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤."
}

# üü¢ /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "üé® –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π —É —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ [–ù–∞–∑–≤–∞].\n"
        "–û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª, —É —è–∫–æ–º—É —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç, —Ç–∞ –¥–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä–æ—Å—Ç–∏—Ö —É–º–æ–≤, —â–æ–± –±—É—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–º üí´",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES.keys()],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.category)

# üü¢ /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "‚ÑπÔ∏è –¶–µ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —É —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ [–ù–∞–∑–≤–∞].\n\n"
        "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
        "1Ô∏è‚É£ –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.\n"
        "2Ô∏è‚É£ –í–∏–∫–æ–Ω–∞–π —É–º–æ–≤–∏ (—Ä–µ–ø–æ—Å—Ç, –ø—ñ–¥–ø–∏—Å–∫–∞, –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏).\n"
        "3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ –¥–∞–Ω—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–Ω—ñ–∫, –æ–ø–∏—Å, —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è).\n"
        "4Ô∏è‚É£ –ß–µ–∫–∞–π –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–¥–º—ñ–Ω–æ–º.\n\n"
        "üìú –ü—Ä–∞–≤–∏–ª–∞: /rules\n"
        "üì© –Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è, –ø–∏—à–∏ –∞–¥–º—ñ–Ω–∞–º: @AdminUsername"
    )
    await message.answer(help_text)

# üü¢ /rules
@router.message(Command("rules"))
async def cmd_rules(message: Message):
    rules_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π:\n"
        "1. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —É–º–æ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n"
        "2. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "3. –ù–µ –±—ñ–ª—å—à–µ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ –ø–æ—Å—Ç.\n"
        "4. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 7 –¥–Ω—ñ–≤.\n"
        "5. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ NSFW, –æ–±—Ä–∞–∑–ª–∏–≤–∏–π –∞–±–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "6. –ê–¥–º—ñ–Ω–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º.\n\n"
        "üì© –ó –ø–∏—Ç–∞–Ω–Ω—è–º–∏: @AdminUsername"
    )
    await message.answer(rules_text)

# üü¢ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@router.message(lambda message: message.text in CATEGORIES)
async def handle_category_selection(message: Message, state: FSMContext):
    category = message.text
    user_id = message.from_user.id
    last_submission = supabase.table("submissions").select("submitted_at").eq("user_id", user_id).order("submitted_at", desc=True).limit(1).execute()
    
    if last_submission.data:
        last_time = datetime.fromisoformat(last_submission.data[0]["submitted_at"].replace("Z", "+00:00"))
        if datetime.utcnow() - last_time < timedelta(days=7):
            await message.answer("‚ö†Ô∏è –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 7 –¥–Ω—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!")
            return

    await state.update_data(category=category)
    await message.answer(
        f"‚úÖ –©–æ–± –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ {category}, –≤–∏–∫–æ–Ω–∞–π –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:\n\n"
        f"üîÑ –ó—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç [–Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏](https://t.me/community_link)\n"
        f"‚úÖ –ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/channel_link)\n"
        f"üìù –ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É\n\n"
        f"üìå –ü—Ä–∏–∫–ª–∞–¥: {CATEGORIES[category]}\n\n"
        f"–ö–æ–ª–∏ –≤—Å–µ –±—É–¥–µ –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ '–Ø –≤—Å–µ –∑—Ä–æ–±–∏–≤(–ª–∞)'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–Ø –≤—Å–µ –∑—Ä–æ–±–∏–≤(–ª–∞)")]],
            resize_keyboard=True
        ),
        parse_mode="Markdown"
    )



# üü¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤
@router.message(lambda message: message.text == "–Ø –≤—Å–µ –∑—Ä–æ–±–∏–≤(–ª–∞)")
async def confirm_ready(message: Message, state: FSMContext):
    await message.answer(
        "üìã –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é *–æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º*:\n\n"
        "1. –Ü–º‚Äô—è / –Ω—ñ–∫–Ω–µ–π–º\n"
        "2. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
        "3. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ (Instagram: @–Ω—ñ–∫, Telegram: @–Ω—ñ–∫–Ω–µ–π–º)\n\n"
        "üìå –ü—Ä–∏–∫–ª–∞–¥:\n"
        "–ù—ñ–∫: @Artist\n"
        "–û–ø–∏—Å: –ü—Ä–æ–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –¥–∏–∑–∞–π–Ω!\n"
        "–°–æ—Ü–º–µ—Ä–µ–∂—ñ: Instagram: @artist, Telegram: @artist\n\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞–¥—ñ—à–ª–∏ –¥–æ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å.",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await state.set_state(Form.description)

# üü¢ –û–ø–∏—Å —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
@router.message(Form.description)
async def get_description_and_socials(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
    if not message.text or len(message.text.split('\n')) < 3:
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n"
            "1. –Ü–º‚Äô—è / –Ω—ñ–∫–Ω–µ–π–º\n"
            "2. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
            "3. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ\n\n"
            "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
        )
        return

    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    try:
        lines = message.text.split('\n')
        nickname = lines[0].strip()
        description = lines[1].strip()
        socials = '\n'.join(lines[2:]).strip()

        await state.update_data(nickname=nickname, description=description, socials=socials)
        await message.answer("üì∏ –ù–∞–¥—ñ—à–ª–∏ –¥–æ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
        await state.set_state(Form.images)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–≤ —É—Å—ñ –¥–∞–Ω—ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ:\n"
            "1. –Ü–º‚Äô—è / –Ω—ñ–∫–Ω–µ–π–º\n"
            "2. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
            "3. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ\n\n"
            "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
        )

# üü¢ –§–æ—Ç–æ (–±–µ–∑ –∑–º—ñ–Ω)
@router.message(Form.images, F.photo)
async def get_images(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)

    if len(photos) >= 5:
        await message.answer("‚úÖ –î—è–∫—É—é! –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
        await finish_submission(message.from_user, state, photos)
    else:
        await state.update_data(photos=photos)
        await message.answer(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ ({len(photos)}/5). –ù–∞–¥—ñ—à–ª–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ /done.")

# ‚úÖ /done (–±–µ–∑ –∑–º—ñ–Ω)
@router.message(Form.images, F.text == "/done")
async def done_images(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ —Ö–æ—á–∞ –± 1 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return
    await message.answer("‚úÖ –î—è–∫—É—é! –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
    await finish_submission(message.from_user, state, photos)

# ‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ (–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö)
async def finish_submission(user: types.User, state: FSMContext, photos: list):
    data = await state.get_data()
    await state.clear()

    text = (
        f"üì• <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥</b> @{user.username or user.first_name}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {data['category']}\n"
        f"<b>–ù—ñ–∫:</b> {data.get('nickname', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–û–ø–∏—Å:</b> {data.get('description', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–°–æ—Ü–º–µ—Ä–µ–∂—ñ:</b>\n{data.get('socials', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}"
    )

    media = [InputMediaPhoto(media=photos[0], caption=text, parse_mode="HTML")]
    for p in photos[1:]:
        media.append(InputMediaPhoto(media=p))

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{user.id}")
    keyboard.button(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏", callback_data=f"reject:{user.id}")
    markup = keyboard.as_markup()

    try:
        await bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media)
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text="üîé –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {e}")
        await bot.send_message(user.id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        return

    supabase.table("submissions").insert({
        "user_id": user.id,
        "username": user.username or user.first_name,
        "category": data["category"],
        "nickname": data.get("nickname", ""),
        "description": data.get("description", ""),
        "socials": data.get("socials", ""),
        "images": photos,
        "status": "pending",
        "submitted_at": datetime.utcnow().isoformat()
    }).execute()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await router.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling –∑ router

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
