import os
import re
import time
import json
import random
import asyncio
import logging
import traceback
from datetime import datetime, timedelta
from typing import List
import uuid

from supabase import create_client, Client

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramNotFound,
    TelegramRetryAfter,
    TelegramForbiddenError,
)
from aiogram.types import (
    Message,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s:%(levelname)s - %(message)s')

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7645134499:AAFRfwsn7dr5W2m81gCJPwX944PRqk-sjEc"
ADMIN_CHAT_ID = -1002802098163
MAIN_CHAT_ID = -1002865535470

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
router = Router()
dp.include_router(router)

# üîå –î–∞–Ω—ñ –¥–ª—è Supabase
SUPABASE_URL = "https://clbcovdeoahrmxaoijyt.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYmNvdmRlb2Focm14YW9panl0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNTc4NTAsImV4cCI6MjA2NzczMzg1MH0.dxwJhTZ9ei4dOnxmCvGztb8pfUqTlprfd0-woF6Y-lY"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# üìã –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    category = State()
    description = State()
    images = State()

# üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —ó—Ö –æ–ø–∏—Å–∏
CATEGORIES = {
    "üêæ –ê–¥–æ–ø—Ç–∏": "–ü–æ—Å—Ç–∏ –ø—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤, —è–∫–∏—Ö –≤–∏ –ø—Ä–æ–ø–æ–Ω—É—î—Ç–µ –¥–ª—è –∞–¥–æ–ø—Ü—ñ—ó.",
    "üßµ –†–µ–∫–≤–µ—Å—Ç–∏": "–ó–∞–ø–∏—Ç–∏ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∞–±–æ —ñ–Ω—à–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.",
    "üé® –ö–æ–º—ñ—à—ñ / –ü—Ä–∞–π—Å–∏": "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –ø–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏ (–∫–æ–º—ñ—à–µ–Ω–∏, –ø—Ä–∞–π—Å–∏).",
    "üéÅ –õ–æ—Ç–µ—Ä–µ—ó / –ö–æ–Ω–∫—É—Ä—Å–∏": "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –ª–æ—Ç–µ—Ä–µ—ó –∞–±–æ –∫–æ–Ω–∫—É—Ä—Å–∏.",
    "üì£ –°–∞–º–æ–ø—ñ–∞—Ä": "–ü—Ä–æ–º–æ—Ü—ñ—è –≤–∞—à–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —á–∏ –ø—Ä–æ—Ñ—ñ–ª—é.",
    "ü§ù DTIYS": "–ß–µ–ª–µ–Ω–¥–∂—ñ 'Draw This In Your Style'.",
    "üìÖ –Ü–≤–µ–Ω—Ç–∏": "–ê–Ω–æ–Ω—Å–∏ –ø–æ–¥—ñ–π, —Å—Ç—Ä—ñ–º—ñ–≤ —á–∏ —ñ–Ω—à–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤."
}

# üü¢ /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    await message.answer(
        "üé® –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π —É —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ [–ù–∞–∑–≤–∞].\n"
        "–û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª, —É —è–∫–æ–º—É —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Å—Ç, —Ç–∞ –¥–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä–æ—Å—Ç–∏—Ö —É–º–æ–≤, —â–æ–± –±—É—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–º üí´",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES.keys()],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.category)

# üü¢ /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    help_text = (
        "‚ÑπÔ∏è –¶–µ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —É —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ [–ù–∞–∑–≤–∞].\n\n"
        "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
        "1Ô∏è‚É£ –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start.\n"
        "2Ô∏è‚É£ –í–∏–∫–æ–Ω–∞–π —É–º–æ–≤–∏ (—Ä–µ–ø–æ—Å—Ç, –ø—ñ–¥–ø–∏—Å–∫–∞, –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏).\n"
        "3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ –¥–∞–Ω—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–Ω—ñ–∫, –æ–ø–∏—Å, —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è).\n"
        "4Ô∏è‚É£ –ß–µ–∫–∞–π –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–¥–º—ñ–Ω–æ–º.\n\n"
        "üìú –ü—Ä–∞–≤–∏–ª–∞: /rules\n"
        "üì© –Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è, –ø–∏—à–∏ –∞–¥–º—ñ–Ω–∞–º: @AdminUsername"
    )
    await message.answer(help_text)

# üü¢ /rules
@router.message(Command("rules"))
async def cmd_rules(message: Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /rules –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    rules_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π:\n"
        "1. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —É–º–æ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n"
        "2. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "3. –ù–µ –±—ñ–ª—å—à–µ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ –ø–æ—Å—Ç.\n"
        "4. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 7 –¥–Ω—ñ–≤.\n"
        "5. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ NSFW, –æ–±—Ä–∞–∑–ª–∏–≤–∏–π –∞–±–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "6. –ê–¥–º—ñ–Ω–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º.\n\n"
        "üì© –ó –ø–∏—Ç–∞–Ω–Ω—è–º–∏: @AdminUsername"
    )
    await message.answer(rules_text)

# üü¢ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É
@router.message(Command("test_main_chat"))
async def test_main_chat(message: Message):
    try:
        logging.info(f"–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É {MAIN_CHAT_ID}")
        await bot.send_message(chat_id=MAIN_CHAT_ID, text="–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞")
        await message.answer("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç!")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É: {e}")
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# üü¢ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@router.message(lambda message: message.text in CATEGORIES)
async def handle_category_selection(message: Message, state: FSMContext):
    category = message.text
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category}")
    
    try:
        last_submission = supabase.table("submissions").select("submitted_at").eq("user_id", user_id).order("submitted_at", desc=True).limit(1).execute()
        if last_submission.data:
            last_time = datetime.fromisoformat(last_submission.data[0]["submitted_at"].replace("Z", "+00:00"))
            if datetime.utcnow() - last_time < timedelta(days=7):
                await message.answer("‚ö†Ô∏è –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 7 –¥–Ω—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!")
                return
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—è–≤–∫–∏ –≤ Supabase: {e}")
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        return

    await state.update_data(category=category)
    await message.answer(
        f"‚úÖ –©–æ–± –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ {category}, –≤–∏–∫–æ–Ω–∞–π –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:\n\n"
        f"üîÑ –ó—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç [–Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏](https://t.me/community_link)\n"
        f"‚úÖ –ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/channel_link)\n"
        f"üìù –ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É\n\n"
        f"üìå –ü—Ä–∏–∫–ª–∞–¥: {CATEGORIES[category]}\n\n"
        f"–ö–æ–ª–∏ –≤—Å–µ –±—É–¥–µ –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ '–Ø –≤—Å–µ –∑—Ä–æ–±–∏–≤(–ª–∞)'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–Ø –≤—Å–µ –∑—Ä–æ–±–∏–≤(–ª–∞)")]],
            resize_keyboard=True
        ),
        parse_mode="Markdown"
    )

# üü¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤
@router.message(lambda message: message.text == "–Ø –≤—Å–µ –∑—Ä–æ–±–∏–≤(–ª–∞)")
async def confirm_ready(message: Message, state: FSMContext):
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤")
    await message.answer(
        "üìã –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é *–æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º*:\n\n"
        "1. –Ü–º‚Äô—è / –Ω—ñ–∫–Ω–µ–π–º\n"
        "2. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
        "3. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ (Instagram: @–Ω—ñ–∫, Telegram: @–Ω—ñ–∫–Ω–µ–π–º)\n\n"
        "üìå –ü—Ä–∏–∫–ª–∞–¥:\n"
        "–ù—ñ–∫: @Artist\n"
        "–û–ø–∏—Å: –ü—Ä–æ–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –¥–∏–∑–∞–π–Ω!\n"
        "–°–æ—Ü–º–µ—Ä–µ–∂—ñ: Instagram: @artist, Telegram: @artist\n\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞–¥—ñ—à–ª–∏ –¥–æ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å.",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await state.set_state(Form.description)

# üü¢ –û–ø–∏—Å —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
@router.message(Form.description)
async def get_description_and_socials(message: Message, state: FSMContext):
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∞–Ω–∫–µ—Ç—É: {message.text}")
    if not message.text or len(message.text.split('\n')) < 3:
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n"
            "1. –Ü–º‚Äô—è / –Ω—ñ–∫–Ω–µ–π–º\n"
            "2. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
            "3. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ\n\n"
            "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
        )
        return

    try:
        lines = message.text.split('\n')
        nickname = lines[0].strip()
        description = lines[1].strip()
        socials = '\n'.join(lines[2:]).strip()

        await state.update_data(nickname=nickname, description=description, socials=socials)
        await message.answer("üì∏ –ù–∞–¥—ñ—à–ª–∏ –¥–æ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
        await state.set_state(Form.images)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–≤ —É—Å—ñ –¥–∞–Ω—ñ –∫–æ—Ä–µ–∫—Ç–Ω–æ:\n"
            "1. –Ü–º‚Äô—è / –Ω—ñ–∫–Ω–µ–π–º\n"
            "2. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
            "3. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ\n\n"
            "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
        )

# üü¢ –§–æ—Ç–æ
@router.message(Form.images, F.photo)
async def get_images(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {message.photo[-1].file_id}")

    if len(photos) >= 5:
        await message.answer("‚úÖ –î—è–∫—É—é! –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
        await finish_submission(message.from_user, state, photos)
    else:
        await state.update_data(photos=photos)
        await message.answer(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ ({len(photos)}/5). –ù–∞–¥—ñ—à–ª–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ /done.")

# ‚úÖ /done
@router.message(Form.images, F.text == "/done")
async def done_images(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–≤ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: {photos}")
    if not photos:
        await message.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ —Ö–æ—á–∞ –± 1 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return
    await message.answer("‚úÖ –î—è–∫—É—é! –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.")
    await finish_submission(message.from_user, state, photos)

# ‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞
async def finish_submission(user: types.User, state: FSMContext, photos: list):
    data = await state.get_data()
    submission_id = str(uuid.uuid4())
    logging.info(f"–§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}, submission_id={submission_id}. –î–∞–Ω—ñ: {data}, –§–æ—Ç–æ: {photos}")
    await state.clear()

    text = (
        f"üì• <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥</b> @{user.username or user.first_name}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {data['category']}\n"
        f"<b>–ù—ñ–∫:</b> {data.get('nickname', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–û–ø–∏—Å:</b> {data.get('description', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–°–æ—Ü–º–µ—Ä–µ–∂—ñ:</b>\n{data.get('socials', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"#public"
    )

    media = [InputMediaPhoto(media=photos[0], caption=text, parse_mode="HTML")]
    for p in photos[1:]:
        media.append(InputMediaPhoto(media=p))

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{user.id}:{submission_id}")
    keyboard.button(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏", callback_data=f"reject:{user.id}:{submission_id}")
    markup = keyboard.as_markup()

    try:
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç {ADMIN_CHAT_ID}")
        media_message = await bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media)
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç {ADMIN_CHAT_ID}")
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text="üîé –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)
        media_message_ids = [msg.message_id for msg in media_message]
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {e}")
        await bot.send_message(user.id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º (BadRequest). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        return
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É {ADMIN_CHAT_ID}: {e}")
        await bot.send_message(user.id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω–∞–º (Forbidden). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        return
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {e}")
        await bot.send_message(user.id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        return

    try:
        logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}, submission_id={submission_id}")
        supabase.table("submissions").insert({
            "user_id": user.id,
            "username": user.username or user.first_name,
            "category": data["category"],
            "nickname": data.get("nickname", ""),
            "description": data.get("description", ""),
            "socials": data.get("socials", ""),
            "images": photos,
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat(),
            "submission_id": submission_id,
            "media_message_ids": media_message_ids
        }).execute()
        logging.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ Supabase")
        await bot.send_message(user.id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ Supabase: {e}")
        await bot.send_message(user.id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        return

# üü¢ –°—Ö–≤–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É —Ç–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç
@router.callback_query(lambda c: c.data.startswith("approve:"))
async def approve_post(callback: types.CallbackQuery):
    logging.info(f"Callback approve –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} —Å—Ö–≤–∞–ª–∏–≤ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")

    try:
        logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        result = supabase.table("submissions").update({
            "status": "approved",
            "moderated_at": datetime.utcnow().isoformat(),
            "moderator_id": callback.from_user.id
        }).eq("user_id", user_id).eq("submission_id", submission_id).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Supabase: {result}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –≤ Supabase: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()
        return

    try:
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏ –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        submission = supabase.table("submissions").select("*").eq("user_id", user_id).eq("submission_id", submission_id).eq("status", "approved").execute()
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏: {submission.data}")

        if not submission.data:
            logging.error(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
            await callback.answer()
            return

        data = submission.data[0]
        media_message_ids = data.get("media_message_ids", [])

        try:
            if media_message_ids:
                logging.info(f"–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –∑ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É {ADMIN_CHAT_ID} –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç {MAIN_CHAT_ID}")
                for message_id in media_message_ids:
                    await asyncio.sleep(1)
                    await bot.forward_message(
                        chat_id=MAIN_CHAT_ID,
                        from_chat_id=ADMIN_CHAT_ID,
                        message_id=message_id
                    )
            else:
                raise ValueError("media_message_ids –ø–æ—Ä–æ–∂–Ω—ñ–π")
        except Exception as e:
            logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {e}. –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –Ω–∞–ø—Ä—è–º—É.")
            post_text = (
                f"üì¢ <b>{data['category']}</b>\n\n"
                f"{data['description']}\n\n"
                f"üåê <b>–°–æ—Ü–º–µ—Ä–µ–∂—ñ:</b>\n{data['socials']}\n"
                f"üë§ –í—ñ–¥: @{data['username']}\n"
                f"#public"
            )
            media = [InputMediaPhoto(media=data["images"][0], caption=post_text, parse_mode="HTML")]
            for photo in data["images"][1:]:
                media.append(InputMediaPhoto(media=photo))
            logging.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç {MAIN_CHAT_ID}")
            await bot.send_media_group(chat_id=MAIN_CHAT_ID, media=media)

        await callback.message.edit_text("‚úÖ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—ñ!")
        await bot.send_message(user_id, "üéâ –í–∞—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—ñ!")
        await callback.answer()
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç (BadRequest).")
        await callback.answer()
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É {MAIN_CHAT_ID}: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É.")
        await callback.answer()
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç.")
        await callback.answer()

# üü¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É
@router.callback_query(lambda c: c.data.startswith("reject:"))
async def reject_post(callback: types.CallbackQuery):
    logging.info(f"Callback reject –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")

    try:
        logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        result = supabase.table("submissions").update({
            "status": "rejected",
            "moderated_at": datetime.utcnow().isoformat(),
            "moderator_id": callback.from_user.id,
            "rejection_reason": "–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º"
        }).eq("user_id", user_id).eq("submission_id", submission_id).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Supabase: {result}")
        await callback.message.edit_text("‚ùå –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        await bot.send_message(user_id, "üòî –í–∞—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: –ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º.")
        await callback.answer()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()

# üü¢ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤
@router.callback_query()
async def debug_callback(callback: types.CallbackQuery):
    logging.info(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ callback-–∑–∞–ø–∏—Ç: {callback.data}")
    await callback.answer("–û—Ç—Ä–∏–º–∞–Ω–æ callback, –∞–ª–µ –Ω–µ–º–∞—î –æ–±—Ä–æ–±–Ω–∏–∫–∞")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@dp.errors()
async def error_handler(update, exception):
    logging.exception(f"–í–∏–Ω—è—Ç–æ–∫: {exception}")
    return True

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ dp —ñ bot –¥–ª—è webhook.py
__all__ = ["dp", "bot", "TOKEN"]
