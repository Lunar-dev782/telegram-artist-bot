import re
import time
import json
import random
import asyncio
import logging
import traceback
from datetime import datetime, timedelta
from typing import List
import uuid
import html
from supabase import create_client, Client
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramNotFound,
    TelegramRetryAfter,
    TelegramForbiddenError,
)
from aiogram.types import (
    Message,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s:%(levelname)s - %(message)s')

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7645134499:AAFv6nRPsiy-6p2h2HJHhmeUZby2PGu9vFg"
ADMIN_CHAT_ID = -1002802098163
MAIN_CHAT_ID = -1002865535470
ADMIN_CONTACTS = ["@Admin1", "@Admin2"]

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
router = Router()
dp.include_router(router)

# üîå –î–∞–Ω—ñ –¥–ª—è Supabase
SUPABASE_URL = "https://clbcovdeoahrmxaoijyt.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYmNvdmRlb2Focm14YW9panl0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNTc4NTAsImV4cCI6MjA2NzczMzg1MH0.dxwJhTZ9ei4dOnxmCvGztb8pfUqTlprfd0-woF6Y-lY"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# üìã –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    main_menu = State()
    category = State()
    repost_platform = State()
    repost_link = State()
    description = State()
    images = State()
    question = State()
    awaiting_answer = State()

# üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —ó—Ö —Ö–µ—à—Ç–µ–≥–∏
CATEGORIES = {
    "üí∞ –ü–ª–∞—Ç–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó": {
        "description": "–ü—Ä–æ–¥–∞—î—à –∫–æ–º—ñ—à—ñ, –∞–¥–æ–ø—Ç–∏, –ø—Ä–∏–Ω—Ç–∏ —á–∏ —â–æ—Å—å —ñ–Ω—à–µ? –†–æ–∑–∫–∞–∂–∏ ‚Äî —ñ —Ç–µ–±–µ –∑–Ω–∞–π–¥—É—Ç—å!",
        "hashtag": "#–¢–≤–æ—Ä—á—ñ–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"
    },
    "üì£ –ü—Ä–æ–º–æ —Å–æ—Ü–º–µ—Ä–µ–∂": {
        "description": "–ü–æ–∫–∞–∑—É–π —Å–≤–æ—ó –ø—Ä–æ—Ñ—ñ–ª—ñ, –±–ª–æ–≥–∏, –∫–∞–Ω–∞–ª–∏. –•–∞–π —Å–≤—ñ—Ç –ø–æ–±–∞—á–∏—Ç—å —Ç–µ–±–µ!",
        "hashtag": "#–ü—Ä–æ–º–æ–°–æ—Ü–º–µ—Ä–µ–∂"
    },
    "üéâ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ": {
        "description": "–ö–æ–Ω–∫—É—Ä—Å–∏, DTIYS, —Ä–µ–∫–≤–µ—Å—Ç–∏, —ñ–≤–µ–Ω—Ç–∏ ‚Äî —É—Å–µ, —â–æ –æ–±'—î–¥–Ω—É—î —Ç–≤–æ—Ä—á–∏—Ö!",
        "hashtag": "#–¢–≤–æ—Ä—á—ñ–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"
    },
    "üîé –£ –ø–æ—à—É–∫–∞—Ö –∫—Ä–∏—Ç–∏–∫–∏/—Ñ—ñ–¥–±–µ–∫—É": {
        "description": "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥—É–º–∫–∞ –∑–±–æ–∫—É? –ó–∞–ø—Ä–æ—Å–∏ —Ñ—ñ–¥–±–µ–∫ —Ç—É—Ç!",
        "hashtag": "#–ü–æ—à—É–∫–§—ñ–¥–±–µ–∫—É"
    },
    "üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è": {
        "description": "–ù–æ–≤–∏–Ω–∏, –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ ‚Äî —Å–ª–æ–≤–æ –∑–∞ —Ç–æ–±–æ—é.",
        "hashtag": "#–û–≥–æ–ª–æ—à–µ–Ω–Ω—è"
    },
    "üåü –Ü–Ω—à–µ": {
        "description": "–ù–µ –∑–Ω–∞–π—à–ª–æ—Å—è –º—ñ—Å—Ü—è –≤ —ñ–Ω—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö? –ù–µ –±—ñ–¥–∞ ‚Äî —Ü—è —Å–∞–º–µ –¥–ª—è —Ç–∞–∫–æ–≥–æ!",
        "hashtag": "#–¢–≤–æ—Ä—á–∏–π–ú—ñ–∫—Å"
    }
}
# üü¢ –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫
async def cleanup_old_submissions():
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á—ñ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫")
            seven_days_ago = (datetime.utcnow() - timedelta(days=7)).isoformat()
            result = supabase.table("submissions").delete().lt("submitted_at", seven_days_ago).execute()
            logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(result.data)} –∑–∞—è–≤–æ–∫, —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 7 –¥–Ω—ñ–≤")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
        await asyncio.sleep(3600)

# üü¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(chat_id=MAIN_CHAT_ID, user_id=user_id)
        logging.info(f"–°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {chat_member.status}")
        return chat_member.status in ["member", "creator", "administrator"]
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False
    except TelegramRetryAfter as e:
        logging.warning(f"–û–±–º–µ–∂–µ–Ω–Ω—è Telegram API, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥ –¥–ª—è user_id={user_id}")
        await asyncio.sleep(e.retry_after)
        return False
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False

# üü¢ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def show_main_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    try:
        subscription_status = await check_subscription(user_id)
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_status}")
        if not subscription_status:
            await message.answer(
                "‚ö†Ô∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
                "<a href='https://t.me/+bTmE3LOAMFI5YzBi'>–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É</a> —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)'.",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")]],
                    resize_keyboard=True
                )
            )
            await state.clear()
            return

        await message.answer(
            "üé® <b>–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏</b> <i>–ú–∏—Ç—Ü—ñ –Æ–ê</i>! <b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")],
                    [KeyboardButton(text="‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_main_menu –¥–ª—è user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)



# üü¢ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –æ—á–∏—â–µ–Ω–Ω—è
async def on_startup():
    asyncio.create_task(cleanup_old_submissions())

# üü¢ /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await show_main_menu(message, state)

@router.message(F.text.lower() == "start")
async def cmd_pochnimo(message: Message, state: FSMContext):
    await show_main_menu(message, state)

@router.message(F.text == "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")
async def check_subscription_again(message: Message, state: FSMContext):
    await show_main_menu(message, state)
# üü¢ –û–±—Ä–æ–±–∫–∞ /rules –∞–±–æ –∫–Ω–æ–ø–∫–∏ "üìú –ü—Ä–∞–≤–∏–ª–∞"
@router.message(Form.main_menu, F.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
@router.message(Command("rules"))
async def cmd_rules(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –∞–±–æ –∫–Ω–æ–ø–∫–∞ /–ø—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    rules_text = (
        "<b>üé® –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ <i>–ú–∏—Ç—Ü—ñ –Æ–ê</i>!</b>\n\n"
        
        "<b>üìå –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π:</b>\n"
        "1. <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b> –æ–±–∏—Ä–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É, —á–∏—Ç–∞–π —É–º–æ–≤–∏ —É–≤–∞–∂–Ω–æ.\n"
        "2. <b>–ê–≤—Ç–æ—Ä—Å—Ç–≤–æ:</b> —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω—ñ —Ä–æ–±–æ—Ç–∏. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ:\n"
        "   ‚Äî –ø–ª–∞–≥—ñ–∞—Ç;\n"
        "   ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–µ –®–Ü (–Ω–∞–≤—ñ—Ç—å —á–∞—Å—Ç–∫–æ–≤–æ);\n"
        "   ‚Äî —á—É–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –¥–æ–∑–≤–æ–ª—É.\n"
        "3. <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è:</b> –¥–æ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å, –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å, —Å–æ—Ü–º–µ—Ä–µ–∂—ñ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º).\n"
        "4. <b>–ß–∞—Å—Ç–æ—Ç–∞:</b> –º–∞–∫—Å–∏–º—É–º 2 –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.\n"
        "5. <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> –∑—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç <a href='https://t.me/c/2865535470/16'>—Ü—å–æ–≥–æ –¥–æ–ø–∏—Å—É</a> –∞–±–æ –ø–æ–¥—ñ–ª–∏—Å—å –±–æ—Ç–æ–º –∑ 3 –¥—Ä—É–∑—è–º–∏.\n\n"

        "<b>üö´ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ:</b>\n"
        "‚Äî NSFW –±–µ–∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–ª—é—Ä—É –∞–±–æ –±–µ–∑ –∑–≥–æ–¥–∏ –∞–¥–º—ñ–Ω—ñ–≤\n"
        "‚Äî –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è <u>—Ç—ñ–ª—å–∫–∏ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö</u> ‚Äî –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é 18+\n"
        "‚Äî –û–±—Ä–∞–∑–∏, —Ç–æ–∫—Å–∏—á–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞, —Ä–µ–∫–ª–∞–º–∞ –±–µ–∑ –∑–≥–æ–¥–∏\n"
        "‚Äî –ü–æ—Ä—É—à–µ–Ω–Ω—è –∑–∞–∫–æ–Ω—ñ–≤, –∞–≤—Ç–æ—Ä—Å—å–∫–∏—Ö –ø—Ä–∞–≤\n"
        "‚Äî –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–æ—Å—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ –≤ –ø–æ—Å—Ç–∞—Ö\n\n"

        "<b>ü§ñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º:</b>\n"
        "‚Äî –î–æ—Ç—Ä–∏–º—É–π—Å—è —É—Å—ñ—Ö –µ—Ç–∞–ø—ñ–≤ –∞–Ω–∫–µ—Ç–∏. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –∂–æ–¥–µ–Ω –∫—Ä–æ–∫.\n"
        "‚Äî –Ø–∫—â–æ –±–æ—Ç –∑–∞–≤–∏—Å –∞–±–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î ‚Äî –≤–≤–µ–¥–∏ /start –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω–∞: <code>@AdminUsername</code>\n"
        "‚Äî –°–ø–∞–º, —Ñ–ª—É–¥ –∞–±–æ –∑–ª–æ–≤–∂–∏–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ ‚Äî –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è\n\n"

        "<b>üõ† –ú–æ–¥–µ—Ä–∞—Ü—ñ—è:</b>\n"
        "‚Äî –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å:\n"
        "   ‚Äî –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –ø–æ—Å—Ç, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤–∞–º;\n"
        "   ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç, —â–æ –ø–æ—Ä—É—à—É—î –ø—Ä–∞–≤–∏–ª–∞;\n"
        "   ‚Äî –≤–∏–¥–∞—Ç–∏ –±–∞–Ω –∞–±–æ –æ–±–º–µ–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞.\n\n"

        "<b>‚ùì –ü–∏—Ç–∞–Ω–Ω—è —á–∏ —Å–∫–∞—Ä–≥–∏?</b> –ü–∏—à–∏ <code>@AdminUsername</code>\n"
        "<b>üîó –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø—Ä–∞–≤–∏–ª:</b> <a href='https://t.me/c/2865535470/16'>—Ç—É—Ç</a>"
    )

    await message.answer(
        rules_text,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.main_menu)

# üü¢ –û–±—Ä–æ–±–∫–∞ "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç"
@router.message(Form.main_menu, F.text == "üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")
async def handle_propose_post(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç'")

    try:
        seven_days_ago = (datetime.utcnow() - timedelta(days=7)).isoformat()
        recent_submissions = supabase.table("submissions").select("submitted_at").eq("user_id", user_id).gte("submitted_at", seven_days_ago).execute()
        if len(recent_submissions.data) >= 2:
            await message.answer(
                "‚ö†Ô∏è –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 2 –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            await state.set_state(Form.main_menu)
            return

        await message.answer(
            "üé® <b>–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES.keys()] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.category)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_propose_post –¥–ª—è user_id={user_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)

# üü¢ –û–±—Ä–æ–±–∫–∞ "–Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è"
@router.message(Form.main_menu, F.text == "‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")
async def handle_other_questions(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è'")
    await message.answer(
        f"‚ùì <b>–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ —Ç—É—Ç, —ñ –Ω–∞—à—ñ –∞–¥–º—ñ–Ω–∏ –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏.</b>\n\n"
        f"üì© –¢–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–ø—Ä—è–º—É:\n<code>{' ‚Ä¢ '.join(ADMIN_CONTACTS)}</code>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.question)


# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–∏—Ç–∞–Ω—å –¥–æ –∞–¥–º—ñ–Ω—ñ–≤
@router.message(Form.question)
async def process_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    question = message.text.strip()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è: {question}")

    if message.text and message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.question")
        await show_main_menu(message, state)
        return

    if not question:
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    try:
        question_id = str(uuid.uuid4())
        logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –∑ question_id={question_id}")

        user_display_name = (message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á").replace("<", "&lt;").replace(">", "&gt;")
        question_data = {
            "question_id": question_id,
            "user_id": user_id,
            "username": user_display_name,
            "question_text": question,
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat()
        }
        logging.info(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—é questions: {question_data}")

        result = supabase.table("questions").insert(question_data).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ Supabase: {result.data}")
        if not result.data:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤ Supabase: –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

        await message.answer(
            "‚úÖ <b>–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ–≤–¥–æ–≤–∑—ñ –±—É–¥–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        logging.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)




# üü¢ –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥—ñ—ó)
@router.message(Form.main_menu)
async def handle_invalid_main_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –¥—ñ—é —É —Å—Ç–∞–Ω—ñ Form.main_menu: {text}, —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {message.content_type}")

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.main_menu")
        await show_main_menu(message, state)
        return

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥
    await message.answer(
        "‚ö†Ô∏è <b>–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.</b>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")],
                [KeyboardButton(text="‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.main_menu)

# ===== –°–¢–ê–ù–ò =====
class AdminAnswer(StatesGroup):
    awaiting_answer = State()

# ===== –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ê–î–ú–Ü–ù–ê =====
async def is_admin(admin_id: int) -> bool:
    result = supabase.table("admins").select("admin_id").eq("admin_id", admin_id).execute()
    return bool(result.data)

# ===== –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ò–ô –•–ï–ù–î–õ–ï–† –ö–û–ú–ê–ù–î =====
@router.message(Command(commands=["start", "rules", "help", "–ø–∏—Ç–∞–Ω–Ω—è", "–∫–æ–¥"]))
async def handle_commands(message: Message, state: FSMContext):
    user_id = message.from_user.id
    command = message.text.split()[0].lstrip("/").lower()
    logging.info(f"–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /{command} –≤—ñ–¥ user_id={user_id}")

    try:
        if command == "start":
            await show_main_menu(message, state)

        elif command == "rules":
            await cmd_rules(message, state)

        elif command == "help":
            await cmd_help(message, state)

        elif command == "–ø–∏—Ç–∞–Ω–Ω—è":
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–∫–ª–∏–∫–∞–≤ –∫–æ–º–∞–Ω–¥—É /–ø–∏—Ç–∞–Ω–Ω—è")
            if not await is_admin(user_id):
                logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞")
                await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏. –°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /–∫–æ–¥.")
                return
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —î –∞–¥–º—ñ–Ω–æ–º, –≤–∏–∫–ª–∏–∫–∞—î–º–æ send_next_question")
            await send_next_question(user_id)

        elif command == "–∫–æ–¥":
            parts = message.text.split(maxsplit=1)
            if len(parts) < 2:
                await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /–∫–æ–¥ <–∫–æ–¥>")
                return

            code = parts[1].strip()
            if code != "12345":
                await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return

            existing_admin = supabase.table("admins").select("admin_id").eq("admin_id", user_id).execute()
            if existing_admin.data:
                await message.answer("‚úÖ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")
                return

            admin_data = {"admin_id": user_id, "added_at": datetime.utcnow().isoformat()}
            result = supabase.table("admins").insert(admin_data).execute()
            if not result.data:
                raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")

            await message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–∏—Ç–∞–Ω—å.")

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /{command} –¥–ª—è user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.",
            parse_mode="HTML"
        )

# ===== –û–ë–†–û–ë–ù–ò–ö –ù–ï–í–Ü–î–û–ú–ò–• –ö–û–ú–ê–ù–î =====
@router.message(F.text.startswith("/"))
async def handle_unknown_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    command = message.text.split()[0].lstrip("/").lower()
    known_commands = ["start", "rules", "help", "–ø–∏—Ç–∞–Ω–Ω—è", "–∫–æ–¥"]
    
    if command in known_commands:
        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /{command} –≤—ñ–¥ user_id={user_id} –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ handle_commands, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–æ–º–∞

    logging.info(f"DEBAG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –Ω–µ–≤—ñ–¥–æ–º—É –∫–æ–º–∞–Ω–¥—É /{command}")
    await message.answer(
        "‚ö†Ô∏è <b>–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.</b> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start, /rules, /help –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")],
                [KeyboardButton(text="‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.main_menu)
        

# ===== –ù–ê–°–¢–£–ü–ù–ï –ü–ò–¢–ê–ù–ù–Ø =====
async def send_next_question(admin_id: int):
    try:
        logging.info(f"–ó–∞–ø–∏—Ç –ø–∏—Ç–∞–Ω—å –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏ 'pending' –∞–±–æ 'skipped' –¥–ª—è admin_id={admin_id}")
        pending_qs = supabase.table("questions").select("*").in_("status", ["pending", "skipped"]).order("submitted_at").execute()
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(pending_qs.data)} –ø–∏—Ç–∞–Ω—å: {pending_qs.data}")

        if not pending_qs.data:
            cont_buttons = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚û°Ô∏è –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É", callback_data="restart_answering"),
                    InlineKeyboardButton(text="‚õî –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ–∞–Ω—Å", callback_data="stop_answering")
                ]
            ])
            await bot.send_message(admin_id, "‚úÖ –ù–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –Ω–µ–º–∞—î.", parse_mode="HTML", reply_markup=cont_buttons)
            return

        next_q = pending_qs.data[0]
        total = len(pending_qs.data)
        user_name = next_q.get('username', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
        clickable_user = f"<a href='tg://user?id={next_q['user_id']}'>{html.escape(user_name)}</a>"

        text = (
            f"üì© –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {clickable_user} (1/{total}):\n"
            f"<b>ID:</b> <code>{next_q['user_id']}</code>\n\n"
            f"<b>–¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è:</b>\n{html.escape(next_q['question_text'])}"
        )
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer:{next_q['user_id']}:{next_q['question_id']}"),
                InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip:{next_q['user_id']}:{next_q['question_id']}")
            ],
            [
                InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{next_q['user_id']}:{next_q['question_id']}"),
                InlineKeyboardButton(text="‚õî –ó—É–ø–∏–Ω–∏—Ç–∏—Å—å", callback_data="stop_answering")
            ]
        ])
        await bot.send_message(admin_id, text, parse_mode="HTML", reply_markup=buttons)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_next_question –¥–ª—è admin_id={admin_id}: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(admin_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω—å: {str(e)}. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")

# ===== –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö (–í–Ü–î–ü–û–í–Ü–î–¨ / –ü–†–û–ü–£–°–ö / –í–ò–î–ê–õ–ï–ù–ù–Ø) =====
@router.callback_query(F.data.startswith(("answer:", "skip:", "delete:")))
async def handle_question_buttons(callback: CallbackQuery, state: FSMContext):
    admin_id = callback.from_user.id
    parts = callback.data.split(":")
    if len(parts) != 3:
        logging.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
        await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
        return

    action, user_id_str, question_id = parts
    try:
        user_id = int(user_id_str)
    except ValueError:
        logging.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id —É callback_data: {user_id_str}")
        await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id.")
        return

    if not await is_admin(admin_id):
        logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {admin_id} –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    try:
        question_res = supabase.table("questions").select("*").eq("question_id", question_id).eq("user_id", user_id).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É –ø–∏—Ç–∞–Ω–Ω—è: {question_res.data}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑ Supabase: {str(e)}\n{traceback.format_exc()}")
        await callback.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.")
        return

    if not question_res.data:
        logging.warning(f"–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: question_id={question_id}, user_id={user_id}")
        await callback.answer("‚ö†Ô∏è –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
        return

    q_data = question_res.data[0]
    question_text = q_data["question_text"]
    user_name = q_data.get("username", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    clickable_user = f"<a href='tg://user?id={user_id}'>{html.escape(user_name)}</a>"

    if action == "answer":
        await callback.message.answer(
            f"–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {clickable_user}:\n\n{html.escape(question_text)}",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
                resize_keyboard=True
            )
        )
        await state.set_state(AdminAnswer.awaiting_answer)
        await state.update_data(user_id=user_id, question_id=question_id, question_text=question_text)
        await callback.answer()
        return

    elif action == "skip":
        try:
            supabase.table("questions").update({"status": "skipped"}).eq("question_id", question_id).eq("user_id", user_id).execute()
            logging.info(f"–ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ: question_id={question_id}, user_id={user_id}")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫—É –ø–∏—Ç–∞–Ω–Ω—è: {str(e)}\n{traceback.format_exc()}")
            await callback.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫—É: {str(e)}")
            return
        await callback.answer("‚è≠ –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        await send_next_question(admin_id)
        return

    elif action == "delete":
        try:
            supabase.table("questions").delete().eq("question_id", question_id).eq("user_id", user_id).execute()
            logging.info(f"–ü–∏—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ: question_id={question_id}, user_id={user_id}")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è: {str(e)}\n{traceback.format_exc()}")
            await callback.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {str(e)}")
            return
        await callback.answer("üóë –ü–∏—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        await send_next_question(admin_id)
        return

# ===== –û–ë–†–û–ë–ö–ê –í–Ü–î–ü–û–í–Ü–î–Ü =====
@router.message(AdminAnswer.awaiting_answer)
async def process_answer(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    answer_text = message.text.strip()

    if answer_text == "‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.answer("‚úÖ –í–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        await send_next_question(admin_id)
        return

    if not answer_text:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return

    data = await state.get_data()
    user_id = data["user_id"]
    question_id = data["question_id"]
    question_text = data["question_text"]

    await bot.send_message(
        chat_id=user_id,
        text=f"‚úâÔ∏è <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:</b>\n\n{html.escape(question_text)}\n\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b> {html.escape(answer_text)}",
        parse_mode="HTML"
    )

    supabase.table("questions").update({
        "status": "answered",
        "answered_at": datetime.utcnow().isoformat(),
        "admin_id": admin_id,
        "answer_text": answer_text
    }).eq("question_id", question_id).eq("user_id", user_id).execute()

    await message.answer("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="continue_answering"),
             InlineKeyboardButton(text="‚õî –ó—É–ø–∏–Ω–∏—Ç–∏—Å—å", callback_data="stop_answering")]
        ]
    ))
    await state.clear()

# ===== –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø / –ó–£–ü–ò–ù–ö–ê =====
@router.callback_query(F.data == "continue_answering")
async def continue_answering(callback: CallbackQuery):
    await callback.answer()
    await send_next_question(callback.from_user.id)

@router.callback_query(F.data == "stop_answering")
async def stop_answering(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("‚õî –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ–∞–Ω—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
    await callback.message.edit_text("‚úÖ –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# ===== –ù–ê–°–¢–£–ü–ù–ï –ü–ò–¢–ê–ù–ù–Ø =====
async def send_next_question(admin_id: int):
    pending_qs = supabase.table("questions").select("*").eq("status", "pending").order("submitted_at").execute()
    if not pending_qs.data:
        await bot.send_message(admin_id, "‚úÖ –ù–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –Ω–µ–º–∞—î.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É", callback_data="restart_answering"),
                 InlineKeyboardButton(text="‚õî –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ–∞–Ω—Å", callback_data="stop_answering")]
            ]
        ))
        return

    next_q = pending_qs.data[0]
    total = len(pending_qs.data)
    clickable_user = f"<a href='tg://user?id={next_q['user_id']}'>{html.escape(next_q.get('username', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'))}</a>"

    text = (
        f"üì© –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {clickable_user} (1/{total}):\n"
        f"<b>–¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è:</b>\n{html.escape(next_q['question_text'])}"
    )
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer:{next_q['user_id']}:{next_q['question_id']}"),
         InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip:{next_q['user_id']}:{next_q['question_id']}")],
        [InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{next_q['user_id']}:{next_q['question_id']}"),
         InlineKeyboardButton(text="‚õî –ó—É–ø–∏–Ω–∏—Ç–∏—Å—å", callback_data="stop_answering")]
    ])
    await bot.send_message(admin_id, text, parse_mode="HTML", reply_markup=buttons)

# ===== –ü–ï–†–ï–ó–ê–ü–£–°–ö =====
@router.callback_query(F.data == "restart_answering")
async def restart_answering(callback: CallbackQuery):
    await callback.answer("üîÑ –°–µ–∞–Ω—Å —Ä–æ–∑–ø–æ—á–∞—Ç–æ –∑–∞–Ω–æ–≤–æ.")
    await send_next_question(callback.from_user.id)


  
# üü¢ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@router.message(Form.category)
async def handle_category_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    category = message.text.strip()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category}")

    if category == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.category")
        await show_main_menu(message, state)
        return

    if category not in CATEGORIES:
        await message.answer(
            "‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES.keys()] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    subscription_status = await check_subscription(user_id)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_status}")
    if not subscription_status:
        await message.answer(
            "‚ö†Ô∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
            "<a href='https://t.me/+bTmE3LOAMFI5YzBi'>–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞–Ω–∞–ª—É</a> —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)'.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")]],
                resize_keyboard=True
            )
        )
        await state.clear()
        return

    await state.update_data(category=category)
    if category == "üì© –û–≥–æ–ª–æ—à–µ–Ω–Ω—è":
        await message.answer(
            f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é <b>{category}</b>: {CATEGORIES[category]['description']}\n\n"
            f"üìù <b>–ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:</b>\n\n"
            f"1. <b>–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å</b>\n"
            f"2. <b>–õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ</b>\n\n",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.update_data(repost_platform="", repost_link="")
        await state.set_state(Form.description)
        return

    await message.answer(
        f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é <b>{category}</b>: {CATEGORIES[category]['description']}\n\n"
        f"üîÑ <b>–ó—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞—à–æ—ó</b> <a href='https://t.me/c/2865535470/16'>–Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏</a> —É —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ 3 –¥—Ä—É–∑—è–º\n"
        f"üìù <b>–ü–æ—Ç—ñ–º –∑–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É</b>\n\n"
        f"–î–µ —Ç–∏ –ø–æ–¥—ñ–ª–∏–≤—Å—è(–ª–∞—Å—å) —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é?",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–æ—Ü–º–µ—Ä–µ–∂–∞"), KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.repost_platform)

# üü¢ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è —Ä–µ–ø–æ—Å—Ç—É
@router.message(Form.repost_platform)
async def process_repost_platform(message: Message, state: FSMContext):
    platform = message.text.strip()
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ —Å–ø–æ—Å—ñ–± –ø–æ—à–∏—Ä–µ–Ω–Ω—è: {platform}")

    if platform == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.repost_platform")
        await show_main_menu(message, state)
        return

    if platform not in ["–°–æ—Ü–º–µ—Ä–µ–∂–∞", "–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º"]:
        await message.answer(
            "‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:</b> '–°–æ—Ü–º–µ—Ä–µ–∂–∞' –∞–±–æ '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º'.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–æ—Ü–º–µ—Ä–µ–∂–∞"), KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    await state.update_data(repost_platform=platform)
    if platform == "–°–æ—Ü–º–µ—Ä–µ–∂–∞":
        await message.answer(
            f"üîó <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—É —É —è–∫—ñ–π –≤–∏ –æ–ø—É–±–ª—ñ–∫—É–≤–∞–ª–∏ –¥–æ–ø–∏—Å.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.repost_link)
    else:
        await message.answer(
            "‚úÖ <b>–î—è–∫—É—î–º–æ! –ê–¥–º—ñ–Ω —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—à–∏—Ä–µ–Ω–Ω—è. –û—á—ñ–∫—É–π—Ç–µ!</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await message.answer(
            f"‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:</b>\n\n"
            f"1. <b>–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å</b>\n"
            f"2. <b>–õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ</b>\n",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.update_data(repost_link="")
        await state.set_state(Form.description)

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ø–æ—Å—Ç
@router.message(Form.repost_link)
async def process_repost_link(message: Message, state: FSMContext):
    repost_link = message.text.strip()
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–ø–∏—Å: {repost_link}")

    if repost_link == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.repost_link")
        await show_main_menu(message, state)
        return

    pattern = re.compile(
        r'^(https?://)?'
        r'([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.[a-zA-Z]{2,}'
        r'(/.*)?$|'
        r'^@[a-zA-Z0-9_]{5,}$',
        re.UNICODE
    )
    if not pattern.match(repost_link):
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º.</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ @–Ω—ñ–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @username) –∞–±–æ –ø–æ–≤–Ω–µ URL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://t.me/username, https://www.instagram.com/username).",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    await state.update_data(repost_link=repost_link)
    await message.answer(
        f"‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ–ø–æ—Å—Ç! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:</b>\n\n"
        f"1. <b>–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å</b>: —â–æ —Ü–µ –∑–∞ –¥–æ–ø–∏—Å, –ø—Ä–æ —â–æ –≤—ñ–Ω (2-3 —Ä–µ—á–µ–Ω–Ω—è).\n"
        f"2. <b>–õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ</b>: —É —Ñ–æ—Ä–º–∞—Ç—ñ Instagram: @–Ω—ñ–∫–Ω–µ–π–º, Telegram: @–Ω—ñ–∫–Ω–µ–π–º, –°–∞–π—Ç: https://example.com.\n"
        f"3. <b>–î–æ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å</b>: –ø—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—è–∫—â–æ —î).\n\n",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
    )
    await state.set_state(Form.description)

# üü¢ –û–ø–∏—Å —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
@router.message(Form.description)
async def get_description_and_socials(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∞–Ω–∫–µ—Ç—É: {message.text}")

    if message.text and message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.description")
        await show_main_menu(message, state)
        return

    if not message.text:
        await message.answer(
            "‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –æ–ø–∏—Å —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    try:
        description_text = message.text.strip()
        await state.update_data(raw_description=description_text)
        await message.answer(
            "üì∏ <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–æ –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏ (–ø—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —ó—Ö –¥–æ –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ'.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.images)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.images)

# üü¢ –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
@router.message(Form.images)
async def get_images(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å—Ç–∞–Ω—ñ Form.images: {message.text}")

    if message.text and message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.images")
        await show_main_menu(message, state)
        return

    if message.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ'")
        await submit_without_photos(message, state)
        return

    if message.text == "/done":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–≤–µ—Ä—à–∏–≤ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å")
        await done_images(message, state)
        return

    if message.photo:
        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append(message.photo[-1].file_id)
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {message.photo[-1].file_id}")

        if len(photos) >= 5:
            await finish_submission(message.from_user, state, photos)
        else:
            await state.update_data(photos=photos)
            await message.answer(
                f"üì∏ <b>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ ({len(photos)}/5). –ù–∞–¥—ñ—à–ª–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ /done.</b>",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/done"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
    else:
        await message.answer(
            "‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω–∏ '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ' –∞–±–æ /done.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ")],
                    [KeyboardButton(text="/done"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

# üü¢ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ —Ñ–æ—Ç–æ
@router.message(Form.images, F.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ")
async def submit_without_photos(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ'")
    await finish_submission(message.from_user, state, photos=[])

# üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
@router.message(Form.images, F.text == "/done")
async def done_images(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    category = data.get("category", "")
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–≤ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: {photos}, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}")
    await finish_submission(message.from_user, state, photos)


# üü¢ /help
@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /–¥–æ–ø–æ–º–æ–≥–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    help_text = (
        "‚ÑπÔ∏è <b>–¶–µ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —É —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ</b> <i>–ú–∏—Ç—Ü—ñ –Æ–ê</i>.\n\n"
        "<b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</b>\n"
        "1Ô∏è‚É£ <u>–û–±–µ—Ä–∏ –¥—ñ—é</u> –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø—ñ—Å–ª—è /start.\n"
        "2Ô∏è‚É£ –î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: –≤–∏–±–µ—Ä–∏ <b>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é</b>, –≤–∏–∫–æ–Ω–∞–π —É–º–æ–≤–∏ (—Ä–µ–ø–æ—Å—Ç üì© –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥—Ä—É–∑—è–º, –ø—ñ–¥–ø–∏—Å–∫–∞ ‚úÖ).\n"
        "3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ –¥–∞–Ω—ñ <i>–æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º</i> (–Ω—ñ–∫, –æ–ø–∏—Å, —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üñºÔ∏è ‚Äî —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ).\n"
        "4Ô∏è‚É£ –ß–µ–∫–∞–π –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–¥–º—ñ–Ω–æ–º. ‚è≥\n\n"
        "üìú <b>–ü—Ä–∞–≤–∏–ª–∞:</b> /rules\n"
        f"üì© <b>–ó –ø–∏—Ç–∞–Ω–Ω—è–º–∏:</b> <code>{' ‚Ä¢ '.join(ADMIN_CONTACTS)}</code>"
    )
    await message.answer(
        help_text,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.main_menu)

# üü¢ –§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏
async def finish_submission(user: types.User, state: FSMContext, photos: list):
    data = await state.get_data()
    submission_id = str(uuid.uuid4())
    logging.info(f"–§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –≤—ñ–¥ user_id={user.id}, submission_id={submission_id}. –î–∞–Ω—ñ —Å—Ç–∞–Ω—É: {data}, –§–æ—Ç–æ: {photos}")

    if not data.get("category"):
        logging.error(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è user_id={user.id}: {data}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É —â–µ —Ä–∞–∑.")
        await state.clear()
        return

    description_text = data.get("raw_description", "–ù–µ–≤–∫–∞–∑–∞–Ω–æ")
    user_display_name = user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    user_link = f'<a href="tg://user?id={user.id}">{user_display_name}</a>'
    text = (
        f"üì• <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥</b> {user_link}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {data['category']}\n"
        f"<b>–°–ø–æ—Å—ñ–± –ø–æ—à–∏—Ä–µ–Ω–Ω—è:</b> {data.get('repost_platform', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–ø–∏—Å:</b> {data.get('repost_link', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–û–ø–∏—Å:</b>\n{description_text}\n"
        f"#public"
    )

    try:
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç {ADMIN_CHAT_ID}")
        if photos:
            media = [InputMediaPhoto(media=photos[0], caption=text, parse_mode="HTML")]
            for p in photos[1:]:
                media.append(InputMediaPhoto(media=p))
            media_message = await bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media)
            media_message_ids = [msg.message_id for msg in media_message]
        else:
            media_message_ids = []
            media_message = await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode="HTML")
            media_message_ids.append(media_message.message_id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{user.id}:{submission_id}")
        keyboard.button(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏", callback_data=f"reject:{user.id}:{submission_id}")
        markup = keyboard.as_markup()

        await bot.send_message(chat_id=ADMIN_CHAT_ID, text="üîé <b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:</b>", parse_mode="HTML", reply_markup=markup)
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º (BadRequest). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
        await state.clear()
        return
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É {ADMIN_CHAT_ID}: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω–∞–º (Forbidden). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
        await state.clear()
        return
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
        await state.clear()
        return

    try:
        submission_data = {
            "user_id": user.id,
            "username": user_display_name,
            "category": data["category"],
            "repost_platform": data.get("repost_platform", ""),
            "repost_link": data.get("repost_link", ""),
            "description": description_text,
            "images": photos if photos else [],
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat(),
            "submission_id": submission_id,
            "media_message_ids": media_message_ids if media_message_ids else []
        }
        logging.info(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ Supabase: {submission_data}")
        result = supabase.table("submissions").insert(submission_data).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ Supabase: {result.data}")

        if not result.data:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É –≤ Supabase –¥–ª—è user_id={user.id}, submission_id={submission_id}. –î–∞–Ω—ñ: {submission_data}")
            await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
            await state.clear()
            return

        logging.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ Supabase: {result.data}")
        await bot.send_message(user.id, "‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!</b>", parse_mode="HTML")
        await state.clear()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ Supabase: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {str(e)}. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
        await state.clear()
        return

# üü¢ –°—Ö–≤–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É
@router.callback_query(lambda c: c.data.startswith("approve:"))
async def approve_post(callback: CallbackQuery):
    logging.info(f"Callback approve –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} —Å—Ö–≤–∞–ª–∏–≤ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")

    try:
        logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        check_submission = supabase.table("submissions").select("*").eq("user_id", user_id).eq("submission_id", submission_id).execute()
        if not check_submission.data:
            logging.error(f"–ó–∞—è–≤–∫–∞ –¥–ª—è user_id={user_id}, submission_id={submission_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ submissions")
            await callback.message.edit_text("‚ö†Ô∏è –ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.")
            await callback.answer()
            return

        logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        result = supabase.table("submissions").update({
            "status": "approved",
            "moderated_at": datetime.utcnow().isoformat(),
            "moderator_id": callback.from_user.id
        }).eq("user_id", user_id).eq("submission_id", submission_id).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Supabase: {result.data}")

        if not result.data:
            logging.warning(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ –∂–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è user_id={user_id}, submission_id={submission_id}")
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —ñ—Å–Ω—É—î –∑–∞—è–≤–∫–∞.")
            await callback.answer()
            return

        await asyncio.sleep(0.5)
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏ –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        submission = supabase.table("submissions").select("*").eq("user_id", user_id).eq("submission_id", submission_id).eq("status", "approved").execute()
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏: {submission.data}")

        if not submission.data:
            logging.error(f"–°—Ö–≤–∞–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è user_id={user_id}, submission_id={submission_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—Ö–≤–∞–ª–µ–Ω—É –∑–∞—è–≤–∫—É. –ú–æ–∂–ª–∏–≤–æ, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–µ –≤—ñ–¥–±—É–ª–æ—Å—è.")
            await callback.answer()
            return

        data = submission.data[0]
        category_hashtag = CATEGORIES[data['category']]['hashtag']
        user_display_name = data['username']
        user_link = f'<a href="tg://user?id={user_id}">{user_display_name}</a>'
        post_text = (
            f"{category_hashtag}\n\n"
            f"{data['description']}\n\n"
            f"–ê–≤—Ç–æ—Ä –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {user_link}"
        )

        if data["images"]:
            media = [InputMediaPhoto(media=data["images"][0], caption=post_text, parse_mode="HTML")]
            for photo in data["images"][1:]:
                media.append(InputMediaPhoto(media=photo))
            await bot.send_media_group(chat_id=MAIN_CHAT_ID, media=media)
        else:
            await bot.send_message(chat_id=MAIN_CHAT_ID, text=post_text, parse_mode="HTML")

        await callback.message.edit_text("‚úÖ <b>–ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—ñ!</b>", parse_mode="HTML")
        await bot.send_message(user_id, "üéâ <b>–í–∞—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—ñ!</b>", parse_mode="HTML")
        await callback.answer()
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç (BadRequest).")
        await callback.answer()
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É {MAIN_CHAT_ID}: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É.")
        await callback.answer()
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()

# üü¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É
@router.callback_query(lambda c: c.data.startswith("reject:"))
async def reject_post(callback: CallbackQuery):
    logging.info(f"Callback reject –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")

    try:
        logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        result = supabase.table("submissions").update({
            "status": "rejected",
            "moderated_at": datetime.utcnow().isoformat(),
            "moderator_id": callback.from_user.id,
            "rejection_reason": "–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º"
        }).eq("user_id", user_id).eq("submission_id", submission_id).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Supabase: {result.data}")
        await callback.message.edit_text("‚ùå <b>–ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.</b>", parse_mode="HTML")
        await bot.send_message(user_id, "üòî <b>–í–∞—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.</b> –ü—Ä–∏—á–∏–Ω–∞: –ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º.", parse_mode="HTML")
        await callback.answer()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()

# üü¢ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤
@router.callback_query()
async def debug_callback(callback: CallbackQuery):
    logging.info(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ callback-–∑–∞–ø–∏—Ç: {callback.data} –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}")
    await callback.answer("–û—Ç—Ä–∏–º–∞–Ω–æ callback, –∞–ª–µ –Ω–µ–º–∞—î –æ–±—Ä–æ–±–Ω–∏–∫–∞")

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@dp.errors()
async def error_handler(update, exception):
    logging.exception(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {getattr(update, 'update_id', '–Ω–µ–≤—ñ–¥–æ–º–µ')}: {exception}")
    try:
        if update and hasattr(update, 'callback_query'):
            await update.callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        elif update and hasattr(update, 'message'):
            await update.message.answer(
                "‚ö†Ô∏è <b>–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.</b> –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {str(e)}\n{traceback.format_exc()}")
    return True

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
dp.startup.register(on_startup)
