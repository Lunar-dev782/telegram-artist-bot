import re
import time
import json
import random
import asyncio
import logging
import traceback
from datetime import datetime, timedelta
from typing import List
import uuid
import html
from supabase import create_client, Client
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramNotFound,
    TelegramRetryAfter,
    TelegramForbiddenError,
)
from aiogram.types import (
    Message,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Update


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s:%(levelname)s - %(message)s')

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8190742713:AAFu6-6hM3C9ZIAho2eNmlYz8drJni61OdM"
ADMIN_CHAT_ID = -1003034016408
MAIN_CHAT_ID = -1002440054241
ADMIN_CONTACTS = ["@Admin1", "@Admin2"]

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
router = Router()
dp.include_router(router)

# üîå –î–∞–Ω—ñ –¥–ª—è Supabase
SUPABASE_URL = "https://clbcovdeoahrmxaoijyt.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYmNvdmRlb2Focm14YW9panl0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNTc4NTAsImV4cCI6MjA2NzczMzg1MH0.dxwJhTZ9ei4dOnxmCvGztb8pfUqTlprfd0-woF6Y-lY"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# üìã –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    main_menu = State()
    category = State()
    repost_platform = State()
    repost_link = State()
    description = State()
    images = State()
    question = State()
    awaiting_answer = State()

# üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —ó—Ö —Ö–µ—à—Ç–µ–≥–∏
CATEGORIES = {
    "üí∞ –ü–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏‚öì": {
        "description": (
            "üè¥‚Äç‚ò†Ô∏è <b>–¢—É—Ç –º–∞—Ç—Ä–æ—Å–∏ –≤–∏—Å—Ç–∞–≤–ª—è—é—Ç—å —Ç–≤–æ—Ä—á—ñ –ø–æ—Å–ª—É–≥–∏ –∑–∞ –æ–ø–ª–∞—Ç—É.</b>\n"
            "ü¶ú –°–∫–≤–∞–∞–∞–∫! –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–º–æ–≥–∏ ‚Äî –ó—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç "
            "<a href='https://t.me/mytci_ua/14'>–Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏</a> ü¶ú\n"
            "‚Äî –î–æ–¥–∞–π –æ–ø–∏—Å —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n"
            "‚Äî 18+ ‚Äî –ø—ñ–¥ —Ü–µ–Ω–∑—É—Ä—É.\n"
            "‚Äî –î–æ–¥–∞–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç (–º—ñ–Ω—ñ–º—É–º 50 –≥—Ä–Ω).\n"
            "‚Äî –ü—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç —ñ –¥–µ–¥–ª–∞–π–Ω–∏.\n"
            "‚Äî –í–∫–∞–∂–∏ —Å–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏.\n"
            "‚Äî –†–æ—Å—ñ–π—Å—å–∫—ñ —Ç–∞ –ø—Ä–æ—Ä–æ—Å—ñ–π—Å—å–∫—ñ —Ñ–∞–Ω–¥–æ–º–∏ ‚Äî <u>–∑–∞ –±–æ—Ä—Ç</u>!\n\n"
        ),
        "hashtag": "#–¢–≤–æ—Ä—á—ñ–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó",
        "repost": True,
        "anonymous": False
    },
    "üì£ –ü—Ä–æ–º–æ —Å–æ—Ü–º–µ—Ä–µ–∂üè¥‚Äç‚ò†": {
        "description": (
            "ü¶ú <b>–¢—É—Ç —Ä–µ–∫–ª–∞–º—É—é—Ç—å —Å–≤–æ—ó –∞—Ä—Ç-—Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ.</b>\n"
            "ü¶ú –°–∫–≤–∞–∞–∞–∫! –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–º–æ–≥–∏ ‚Äî –ó—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç "
            "<a href='https://t.me/mytci_ua/14'>–Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏</a> ü¶ú\n"
            "‚Äî –î–æ–¥–∞–π –æ–ø–∏—Å —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n"
            "‚Äî 18+ ‚Äî —Ö–æ–≤–∞—î–º–æ –ø—ñ–¥ —Ü–µ–Ω–∑—É—Ä—É.\n"
            "‚Äî –î–æ–¥–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤—ñ–π –ø–æ—Ä—Ç.\n"
            "‚Äî –ñ–æ–¥–Ω–æ—ó –∞–º–æ—Ä–∞–ª—å—â–∏–Ω–∏!\n"
            "‚Äî –†–æ—Å—ñ–π—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ø—Ä–æ—Ä–æ—Å—ñ–π—Å—å–∫—ñ —Ñ–∞–Ω–¥–æ–º–∏ ‚Äî –∑–∞ –±–æ—Ä—Ç!\n\n"
        ),
        "hashtag": "#–ü—Ä–æ–º–æ–°–æ—Ü–º–µ—Ä–µ–∂",
        "repost": True,
        "anonymous": False
    },
    "üéâ–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñü¶ú": {
        "description": (
            "‚öì <b>–¢—É—Ç –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—é—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∏, —á–µ–ª–µ–Ω–¥–∂—ñ —Ç–∞ —ñ–≤–µ–Ω—Ç–∏.</b>\n"
            "ü¶ú –°–∫–≤–∞–∞–∞–∫! –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–º–æ–≥–∏ ‚Äî –ó—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç "
            "<a href='https://t.me/mytci_ua/14'>–Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏</a> ü¶ú\n"
            "‚Äî –î–æ–¥–∞–π –æ–ø–∏—Å —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n"
            "‚Äî 18+ ‚Äî –ø—ñ–¥ —Ü–µ–Ω–∑—É—Ä—É.\n"
            "‚Äî –î–æ–¥–∞–π –æ–ø–∏—Å, –±–∞–Ω–µ—Ä —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n"
            "‚Äî –ñ–æ–¥–Ω–æ—ó –ø—Ä–æ—Ä–æ—Å—ñ–π—â–∏–Ω–∏ —Ç–∞ —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö —Ñ–∞–Ω–¥–æ–º—ñ–≤!\n"
        ),
        "hashtag": "#–¢–≤–æ—Ä—á—ñ–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
        "repost": True,
        "anonymous": False
    },
    "üñã–ö—Ä–∏—Ç–∏–∫–∏/–§—ñ–¥–±–µ–∫—Éüîé": {
        "description": (
            "üìú <b>–Ø–∫—â–æ —à—É–∫–∞—î—à –∫—Ä–∏—Ç–∏–∫–∏ —á–∏ –ø–æ—Ä–∞–¥–∏ ‚Äî —Ç–æ–±—ñ —Å—é–¥–∏.</b>\n"
            "ü¶ú –°–∫–≤–∞–∞–∞–∫! –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–º–æ–≥–∏:\n"
            "‚Äî –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —á–∏ –ø–∏—Ç–∞–Ω–Ω—è.\n"
            "‚Äî 18+ ‚Äî –ø—ñ–¥ —Ü–µ–Ω–∑—É—Ä—É.\n"
            "‚Äî –ë–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å.\n"
            "‚Äî –ñ–æ–¥–Ω–æ—ó –∞–º–æ—Ä–∞–ª—å–Ω–æ—Å—Ç—ñ —á–∏ —Ü—å–∫—É–≤–∞–Ω—å.\n"
            "‚Äî –†–æ—Å—ñ–π—Å—å–∫—ñ —Ç–∞ –ø—Ä–æ—Ä–æ—Å—ñ–π—Å—å–∫—ñ —Ñ–∞–Ω–¥–æ–º–∏ ‚Äî –∑–∞ –±–æ—Ä—Ç!\n"
        ),
        "hashtag": "#–ü–æ—à—É–∫–§—ñ–¥–±–µ–∫—É",
        "repost": False,
        "anonymous": True
    },
    "üì¢–ü–æ—à—É–∫/–ö–æ—Ä–∏—Å–Ω–æ—Å—Ç—ñüè¥‚Äç‚ò†": {
        "description": (
            "üîî <b>–¢—É—Ç –º–∞—Ç—Ä–æ—Å–∏ –¥—ñ–ª—è—Ç—å—Å—è –∫–æ—Ä–∏—Å–Ω–æ—é –∞–±–æ —Ü—ñ–∫–∞–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é, —à—É–∫–∞—é—Ç—å –ø–æ–º—ñ—á–Ω–∏–∫—ñ–≤, –ø–∏—à—É—Ç—å –≤—ñ–¥–≥—É–∫–∏ –∞–±–æ –∑–∞–¥–∞—é—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –µ–∫—ñ–ø–∞–∂—É.</b>\n"
            "ü¶ú –°–∫–≤–∞–∞–∞–∫! –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–º–æ–≥–∏:\n"
            "‚Äî –î–æ–¥–∞–π –æ–ø–∏—Å –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n"
            "‚Äî –î–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä–∞–≤–∏–ª –±–µ–∑–ø–µ—á–Ω–æ—ó –≥–∞–≤–∞–Ω—ñ.\n"
            "‚Äî –õ–∏—à–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è.\n"
            "‚Äî –ë–µ–∑ –æ–±—Ä–∞–∑ —Ç–∞ –∞–º–æ—Ä–∞–ª—å—â–∏–Ω–∏.\n\n"
        ),
        "hashtag": "#–ö–æ—Ä–∏—Å–Ω–µ",
        "repost": False,
        "anonymous": True
    },
    "üåü–Ü–Ω—à–µüß≠": {
        "description": (
            "üó∫Ô∏è <b>–¢—É—Ç —É—Å–µ —ñ–Ω—à–µ —Ç–≤–æ—Ä—á–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É.</b>\n"
            "ü¶ú –°–∫–≤–∞–∞–∞–∫! –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–º–æ–≥–∏:\n"
            "‚Äî –î–æ–¥–∞–π –æ–ø–∏—Å —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.\n"
            "‚Äî –î–æ—Ç—Ä–∏–º—É–π—Å—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª –∫–æ—Ä–∞–±–ª—è.\n"
            "‚Äî 18+ ‚Äî –ø—ñ–¥ —Ü–µ–Ω–∑—É—Ä—É.\n"
            "‚Äî –ñ–æ–¥–Ω–æ—ó –ø—Ä–æ—Ä–æ—Å—ñ–π—â–∏–Ω–∏ —Ç–∞ –∞–º–æ—Ä–∞–ª—å–Ω–æ—Å—Ç—ñ.\n"
            "‚Äî –Ø–∫—â–æ —Å—É–º–Ω—ñ–≤–∞—î—à—Å—è ‚Äî –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏.\n"
        ),
        "hashtag": "#–¢–≤–æ—Ä—á–∏–π–ú—ñ–∫—Å",
        "repost": False,
        "anonymous": False
    }
}


# üü¢ –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫
async def cleanup_old_submissions():
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á—ñ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫")
            seven_days_ago = (datetime.utcnow() - timedelta(days=7)).isoformat()
            result = supabase.table("submissions").delete().lt("submitted_at", seven_days_ago).execute()
            logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(result.data)} –∑–∞—è–≤–æ–∫, —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 7 –¥–Ω—ñ–≤")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
        await asyncio.sleep(3600)

# üü¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(chat_id=MAIN_CHAT_ID, user_id=user_id)
        logging.info(f"–°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {chat_member.status}")
        return chat_member.status in ["member", "creator", "administrator"]
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False
    except TelegramRetryAfter as e:
        logging.warning(f"–û–±–º–µ–∂–µ–Ω–Ω—è Telegram API, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥ –¥–ª—è user_id={user_id}")
        await asyncio.sleep(e.retry_after)
        return False
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False

# üü¢ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def show_main_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    try:
        subscription_status = await check_subscription(user_id)
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_status}")
        if not subscription_status:
            await message.answer(
                "ü¶ú –°–∫–≤–∞–∞–∞–∫!–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
                "<a href='https://t.me/mytci_ua'>–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É</a> —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å). –°–∫–≤–∞–∞–∫!'.",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")]],
                    resize_keyboard=True
                )
            )
            await state.clear()
            return

        await message.answer(
            "üé® <b>ü¶ú –°–∫–≤–∞–∞–∞–∫! –ü—Ä–∏–≤—ñ—Ç, –º–∞—Ç—Ä–æ—Å–µ!</b>\n\n"
"<i>–¢–∏ –Ω–∞ –±–æ—Ä—Ç—É –ú–∏—Ç–µ—Ü—å–∫–æ–≥–æ –ü–æ—Ä—Ç—É —ñ–º. –ö–∞–ø—ñ—Ç–∞–Ω–∫–∏ –ú‚Äô—é–∑!</i>\n\n"
"–Ø ‚Äî –≤—ñ—Ä–Ω–∏–π –ø–∞–ø—É–≥–∞ –ö–∞–ø—ñ—Ç–∞–Ω–∫–∏, <b>–≥–ª–∞—à–∞—Ç–∞–π —ñ –ø–∏—Å–∞—Ä</b> —Ü—å–æ–≥–æ –∫–æ—Ä–∞–±–ª—è. <b>–°–∫–≤–∞–∞–∞–∫!</b>\n\n"
"üìå –Ø–∫—â–æ –º–∞—î—à <b>–ø–æ—Å—Ç —á–∏ –Ω–æ–≤–∏–Ω—É</b> –¥–ª—è –µ–∫—ñ–ø–∞–∂—É ‚Äî –∫–∏–¥–∞–π –º–µ–Ω—ñ –≤ –¥–∑—å–æ–±, –∞ —è –≤—ñ–¥–Ω–µ—Å—É –Ω–∞ <u>–¥–æ—à–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å</u>!\n\n"
"‚ö†Ô∏è <b>–ü–∞–º‚Äô—è—Ç–∞–π:</b> —Ç—Ä–∏–º–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç —É –º–µ–∂–∞—Ö –Ω–∞—à–æ–≥–æ —É—Å—Ç–∞–≤—É, –±–æ —ñ–Ω–∞–∫—à–µ –æ—Ç—Ä–∏–º–∞—î—à <i>—Å–∫–≤–∞–∞–∫-–¥–æ–≥–∞–Ω—É</i>! üè¥‚Äç‚ò†Ô∏è",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")],
                    [KeyboardButton(text="‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_main_menu –¥–ª—è user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "ü¶ú–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–∫–≤–∞–∞–∞–∫! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@tina263678</code>.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)




# üü¢ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –æ—á–∏—â–µ–Ω–Ω—è
async def on_startup():
    asyncio.create_task(cleanup_old_submissions())

from datetime import datetime

# üü¢ /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = message.from_user

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ users
    try:
        supabase.table("users").upsert({
            "user_id": user.id,
            "telegram_username": user.username or None,
            "full_name": user.full_name,
            "updated_at": datetime.utcnow()
        }, on_conflict=["user_id"]).execute()
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id} —É —Ç–∞–±–ª–∏—Ü—ñ users: {e}")

    await show_main_menu(message, state)


# –¥—É–±–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç—É "start"
@router.message(F.text.lower() == "start")
async def cmd_pochnimo(message: Message, state: FSMContext):
    await cmd_start(message, state)


@router.message(F.text == "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")
async def check_subscription_again(message: Message, state: FSMContext):
    await cmd_start(message, state)


 # üü¢ –û–±—Ä–æ–±–∫–∞ /rules –∞–±–æ –∫–Ω–æ–ø–∫–∏ "üìú –ü—Ä–∞–≤–∏–ª–∞"
@router.message(Form.main_menu, F.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
@router.message(Command("rules"))
async def cmd_rules(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –∞–±–æ –∫–Ω–æ–ø–∫–∞ /–ø—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    rules_text = (
        "<b>ü¶ú –°–∫–≤–∞–∞–∞–∫! –ß–∏—Ç–∞–π —É–≤–∞–∂–Ω–æ!</b>\n\n"

        "üìå <b>–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–∞—Ç—Ä–æ—Å—ñ–≤:</b>\n"
        "1. –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: –≤–∏–±–∏—Ä–∞–π —É–≤–∞–∂–Ω–æ, —á–∏—Ç–∞–π —É–º–æ–≤–∏.\n"
        "2. –ê–≤—Ç–æ—Ä—Å—Ç–≤–æ: –ø–æ—Å—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Å–≤–æ—ó —Å–∫–∞—Ä–±–∏! –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ —á—É–∂—ñ —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ñ.\n"
        "3. –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: –¥–æ 5 –∫–∞—Ä—Ç–∏–Ω–æ–∫, –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å, —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º.\n"
        "4. –ß–∞—Å—Ç–æ—Ç–∞: –º–∞–∫—Å–∏–º—É–º 2 ¬´–ø–æ–≥—Ä–∞–±—É–≤–∞–Ω–Ω—è¬ª –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.\n"
        "5. –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: —Ä–µ–ø–æ—Å—Ç "
        "<a href='https://t.me/mytci_ua/14'>[–ù–∞—Ç–∏—Å–Ω–∏ —Ç—É—Çü¶ú]</a> –∞–±–æ –ø–æ–¥—ñ–ª–∏—Å—å –±–æ—Ç–æ–º –∑ —Ç—Ä—å–æ–º–∞ –¥—Ä—É–∑—è–º–∏.\n\n"

        "üö´ <b>–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ:</b>\n"
        "‚Äî NSFW –±–µ–∑ –±–ª—é—Ä—É/–∑–≥–æ–¥–∏\n"
        "‚Äî 18+ —Ç—ñ–ª—å–∫–∏ –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é\n"
        "‚Äî –¢–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å, —Ä–µ–∫–ª–∞–º–∞ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É\n"
        "‚Äî –ü–æ—Ä—É—à–µ–Ω–Ω—è –∑–∞–∫–æ–Ω—ñ–≤ —ñ –∞–≤—Ç–æ—Ä—Å—å–∫–∏—Ö –ø—Ä–∞–≤\n"
        "‚Äî –†–æ—Å—ñ–π—Å—å–∫–∞ –º–æ–≤–∞ —É –ø–æ—Å—Ç–∞—Ö\n\n"

        "ü§ñ <b>–ë–æ—Ç:</b>\n"
        "‚Äî –î–æ—Ç—Ä–∏–º—É–π—Å—è –∞–Ω–∫–µ—Ç–∏, –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º\n"
        "‚Äî –Ø–∫—â–æ –∑–∞–≤–∏—Å ‚Äî –Ω–∞–ø–∏—à–∏ /start –∞–±–æ –ø–∏—à–∏ @tina263678\n"
        "‚Äî –°–ø–∞–º = —Å–∫–≤–∞–∞–∫-–¥–æ–≥–∞–Ω–∞ ü¶ú\n\n"

        "üõ† <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∏:</b>\n"
        "‚Äî –ú–∞—é—Ç—å –ø—Ä–∞–≤–æ: –≤—ñ–¥—Ö–∏–ª—è—Ç–∏ –ø–æ—Å—Ç–∏, –≤–∏–¥–∞–≤–∞—Ç–∏ –±–∞–Ω –∞–±–æ –æ–±–º–µ–∂–µ–Ω–Ω—è\n\n"

        "‚ùì –ü–∏—Ç–∞–Ω–Ω—è? –ü–∏—à–∏ –≤ –Ω–∞—à —á–∞—Ç\n"
        "üîó –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø—Ä–∞–≤–∏–ª: <a href='https://t.me/mytci_ua/14'>[—Ç—É—Ç]</a>"
    )

    await message.answer(rules_text, parse_mode="HTML")
    await state.set_state(Form.main_menu)

# üü¢ –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥'")
    
    # –∑–∞–≤–∂–¥–∏ –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω, —â–æ–± –Ω–µ –∑–∞–ª–∏–ø–∞–ª–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∞–Ω–∫–µ—Ç–∏
    await state.clear()
    
    # –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await show_main_menu(message, state)


# üü¢ –û–±—Ä–æ–±–∫–∞ "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç"
@router.message(Form.main_menu, F.text == "üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")
async def handle_propose_post(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç'")

    try:
        seven_days_ago = (datetime.utcnow() - timedelta(days=7)).isoformat()
        recent_submissions = supabase.table("submissions").select("submitted_at").eq("user_id", user_id).gte("submitted_at", seven_days_ago).execute()
        if len(recent_submissions.data) >= 2:
            await message.answer(
                "–°–∫–≤–∞–∞–∫! –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 2 –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            await state.set_state(Form.main_menu)
            return

        await message.answer(
            "üé® <b>–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES.keys()] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.category)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_propose_post –¥–ª—è user_id={user_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@tina263678</code>.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)

# üü¢ –û–±—Ä–æ–±–∫–∞ "–Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è"
@router.message(Form.main_menu, F.text == "‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")
async def handle_other_questions(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è'")
    await message.answer(
        f"‚ùì <b>–°–∫–≤–∞–∞–∞–∫! –Ø–∫—â–æ —É —Ç–µ–±–µ —î –ø–∏—Ç–∞–Ω–Ω—è, –∫–∏–¥–∞–π –π–æ–≥–æ –≤ –º—ñ–π –¥–∑—å–æ–± ü¶ú , "
        f"—ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏!</b>\n\n",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.question)


# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–∏—Ç–∞–Ω—å –¥–æ –∞–¥–º—ñ–Ω—ñ–≤
@router.message(Form.question)
async def process_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    question = message.text.strip()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è: {question}")

    if message.text and message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.question")
        await show_main_menu(message, state)
        return

    if not question:
        await message.answer(
            "ü¶ú–°–∫–≤–∞–∞–∫! –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    try:
        question_id = str(uuid.uuid4())
        logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –∑ question_id={question_id}")

        user_display_name = (message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á").replace("<", "&lt;").replace(">", "&gt;")
        question_data = {
            "question_id": question_id,
            "user_id": user_id,
            "username": user_display_name,
            "question_text": question,
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat()
        }
        logging.info(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—é questions: {question_data}")

        result = supabase.table("questions").insert(question_data).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ Supabase: {result.data}")
        if not result.data:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤ Supabase: –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

        await message.answer(
            "ü¶ú <b>–°–∫–≤–∞–∞–∞–∫! –¢–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –∫–∏–Ω—É—Ç–æ –≤ –º—ñ–π –¥–∑—å–æ–±! "
            "–û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        logging.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)

# üü¢ –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥
@router.message(Command(commands=["start", "rules", "help", "–ø–∏—Ç–∞–Ω–Ω—è", "–∫–æ–¥"]))
async def handle_commands(message: Message, state: FSMContext):
    user_id = message.from_user.id
    command = message.text.split()[0].lstrip("/").lower()
    logging.info(f"DEBAG: –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /{command} –¥–ª—è user_id={user_id}, –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç: {message.text}")

    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    await state.clear()
    logging.info(f"DEBAG: –°—Ç–∞–Ω –æ—á–∏—â–µ–Ω–æ –¥–ª—è user_id={user_id}")

    try:
        if command == "start":
            logging.info(f"DEBAG: –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è user_id={user_id}")
            await show_main_menu(message, state)
        elif command == "rules":
            logging.info(f"DEBAG: –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞ /rules –¥–ª—è user_id={user_id}")
            await cmd_rules(message, state)
        elif command == "help":
            logging.info(f"DEBAG: –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞ /help –¥–ª—è user_id={user_id}")
            await cmd_help(message, state)
        elif command == "–ø–∏—Ç–∞–Ω–Ω—è":
            logging.info(f"DEBAG: –ê–¥–º—ñ–Ω {user_id} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—É /–ø–∏—Ç–∞–Ω–Ω—è")
            admin_check = supabase.table("admins").select("admin_id").eq("admin_id", user_id).execute()
            if not admin_check.data:
                logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")
                await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
                return

            question = supabase.table("questions").select("*").eq("status", "pending").order("submitted_at", desc=False).limit(1).execute()
            logging.info(f"DEBAG: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É –¥–æ questions –¥–ª—è admin_id={user_id}: {question.data}")
            if not question.data:
                await message.answer("‚ÑπÔ∏è –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å.")
                return

            question_data = question.data[0]
            user_id_question = question_data["user_id"]
            question_id = question_data["question_id"]
            username = question_data["username"]
            question_text = question_data["question_text"]

            message_text = (
                f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ <b>{username}</b> (ID: {user_id_question}):\n\n"
                f"{question_text}"
            )
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer:{user_id_question}:{question_id}")
            keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip:{user_id_question}:{question_id}")
            keyboard.button(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{user_id_question}:{question_id}")
            markup = keyboard.as_markup()

            await message.answer(
                message_text,
                parse_mode="HTML",
                reply_markup=markup
            )
        elif command == "–∫–æ–¥":
            logging.info(f"DEBAG: –ê–¥–º—ñ–Ω {user_id} –≤–≤—ñ–≤ –∫–æ–º–∞–Ω–¥—É /–∫–æ–¥: {message.text}")
            parts = message.text.split(maxsplit=1)
            if len(parts) < 2:
                await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /–∫–æ–¥ <–∫–æ–¥>")
                return

            code = parts[1].strip()
            logging.info(f"DEBAG: –í–≤–µ–¥–µ–Ω–æ –∫–æ–¥ {code} –¥–ª—è user_id={user_id}")
            if code != "12345":
                logging.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –≤—ñ–¥ admin_id={user_id}: {code}")
                await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return

            existing_admin = supabase.table("admins").select("admin_id").eq("admin_id", user_id).execute()
            logging.info(f"DEBAG: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–¥–º—ñ–Ω–∞ –¥–ª—è user_id={user_id}: {existing_admin.data}")
            if existing_admin.data:
                await message.answer("‚úÖ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")
                return

            admin_data = {
                "admin_id": user_id,
                "added_at": datetime.utcnow().isoformat()
            }
            result = supabase.table("admins").insert(admin_data).execute()
            logging.info(f"DEBAG: –ê–¥–º—ñ–Ω {user_id} –¥–æ–¥–∞–Ω–∏–π –¥–æ —Ç–∞–±–ª–∏—Ü—ñ admins: {result.data}")
            if not result.data:
                raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")

            await message.answer("‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–∏—Ç–∞–Ω—å.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ /{command} –¥–ª—è user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.",
            parse_mode="HTML"
        )
    finally:
        logging.info(f"DEBAG: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏ /{command} –¥–ª—è user_id={user_id}")

# üü¢ –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç—ñ–ª—å–∫–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
@router.message(StateFilter(Form.main_menu), F.text.startswith("/"))
async def handle_unknown_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    command = message.text.split()[0].lstrip("/").lower()
    logging.info(f"DEBAG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –Ω–µ–≤—ñ–¥–æ–º—É –∫–æ–º–∞–Ω–¥—É /{command}")
    
    await message.answer(
        "‚ö†Ô∏è <b>–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.</b> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start, /rules, /help –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")],
                [KeyboardButton(text="‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")]
            ],
            resize_keyboard=True
        )
    )
    # –ª–∏—à–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    await state.set_state(Form.main_menu)


# üü¢ –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥—ñ—ó)
@router.message(Form.main_menu)
async def handle_invalid_main_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –¥—ñ—é —É —Å—Ç–∞–Ω—ñ Form.main_menu: {text}, —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {message.content_type}")

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.main_menu")
        await show_main_menu(message, state)
        return

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥
    await message.answer(
        "ü¶ú–°–∫–≤–∞–∞–∞–∫! <b>–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.</b>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")],
                [KeyboardButton(text="‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.main_menu)

# ===== –°–¢–ê–ù–ò =====
class AdminAnswer(StatesGroup):
    awaiting_answer = State()

# ===== –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ê–î–ú–Ü–ù–ê =====
async def is_admin(admin_id: int) -> bool:
    result = supabase.table("admins").select("admin_id").eq("admin_id", admin_id).execute()
    return bool(result.data)

# ===== –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö (–í–Ü–î–ü–û–í–Ü–î–¨ / –ü–†–û–ü–£–°–ö / –í–ò–î–ê–õ–ï–ù–ù–Ø) =====
@router.callback_query(F.data.startswith(("answer:", "skip:", "delete:")))
async def handle_question_buttons(callback: CallbackQuery, state: FSMContext):
    admin_id = callback.from_user.id
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö.")
        return

    action, user_id_str, question_id = parts
    try:
        user_id = int(user_id_str)
    except ValueError:
        await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π user_id.")
        return

    if not await is_admin(admin_id):
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    question_res = supabase.table("questions").select("*").eq("question_id", question_id).eq("user_id", user_id).execute()
    if not question_res.data:
        await callback.answer("‚ö†Ô∏è –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
        return

    q_data = question_res.data[0]
    question_text = q_data["question_text"]
    user_name = q_data.get("username", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    clickable_user = f"<a href='tg://user?id={user_id}'>{html.escape(user_name)}</a>"

    if action == "answer":
        await callback.message.answer(
            f"–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {clickable_user}:\n\n{html.escape(question_text)}",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
                resize_keyboard=True
            )
        )
        await state.set_state(AdminAnswer.awaiting_answer)
        await state.update_data(user_id=user_id, question_id=question_id, question_text=question_text)
        await callback.answer()
        return

    elif action == "skip":
        try:
            supabase.table("questions").update({"status": "skipped"}).eq("question_id", question_id).eq("user_id", user_id).execute()
        except Exception as e:
            await callback.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫—É: {e}")
            return
        await callback.answer("‚è≠ –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        await send_next_question(admin_id)
        return

    elif action == "delete":
        try:
            supabase.table("questions").delete().eq("question_id", question_id).eq("user_id", user_id).execute()
        except Exception as e:
            await callback.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")
            return
        await callback.answer("üóë –ü–∏—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.")
        await send_next_question(admin_id)
        return

# ===== –û–ë–†–û–ë–ö–ê –í–Ü–î–ü–û–í–Ü–î–Ü –ê–î–ú–Ü–ù–ê =====
@router.message(AdminAnswer.awaiting_answer)
async def process_answer(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    answer_text = message.text.strip()

    if answer_text == "‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.answer("‚úÖ –í–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        await send_next_question(admin_id)
        return

    if not answer_text:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return

    data = await state.get_data()
    user_id = data["user_id"]
    question_id = data["question_id"]
    question_text = data["question_text"]

    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"ü¶ú–°–∫–≤–∞–∞–∫! <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:</b>\n\n{html.escape(question_text)}\n\n<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b> {html.escape(answer_text)}",
            parse_mode="HTML"
        )
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        supabase.table("questions").delete().eq("question_id", question_id).eq("user_id", user_id).execute()
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await state.clear()
        return

    await message.answer("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. ü¶ú–°–∫–≤–∞–∞–∫!.", reply_markup=ReplyKeyboardRemove())

    cont_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="continue_answering"),
            InlineKeyboardButton(text="‚õî –ó—É–ø–∏–Ω–∏—Ç–∏—Å—å", callback_data="stop_answering")
        ]
    ])
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=cont_buttons)
    await state.clear()

# ===== –ü–†–û–î–û–í–ñ–ï–ù–ù–Ø / –ó–£–ü–ò–ù–ö–ê –°–ï–ê–ù–°–£ =====
@router.callback_query(F.data == "continue_answering")
async def continue_answering(callback: CallbackQuery):
    await callback.answer()
    await send_next_question(callback.from_user.id)

@router.callback_query(F.data == "stop_answering")
async def stop_answering(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("‚õî –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ–∞–Ω—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
    await callback.message.edit_text("‚úÖ –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# ===== –í–Ü–î–ü–†–ê–í–ö–ê –ù–ê–°–¢–£–ü–ù–û–ì–û –ü–ò–¢–ê–ù–ù–Ø =====
async def send_next_question(admin_id: int):
    pending_qs = supabase.table("questions").select("*").in_("status", ["pending", "skipped"]).order("submitted_at").execute()
    if not pending_qs.data:
        cont_buttons = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚û°Ô∏è –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É", callback_data="restart_answering"),
                InlineKeyboardButton(text="‚õî –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ–∞–Ω—Å", callback_data="stop_answering")
            ]
        ])
        await bot.send_message(admin_id, "‚úÖ –ù–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –Ω–µ–º–∞—î.", reply_markup=cont_buttons)
        return

    next_q = pending_qs.data[0]
    total = len(pending_qs.data)
    user_name = next_q.get('username', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    clickable_user = f"<a href='tg://user?id={next_q['user_id']}'>{html.escape(user_name)}</a>"

    # üîΩ –û—Å—å —Ç—É—Ç —Ñ–æ—Ä–º—É—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è:
    text = (
        f"üì© –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {clickable_user} (1/{total}):\n\n"
        f"<b>–¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è:</b>\n{html.escape(next_q['question_text'])}"
    )
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer:{next_q['user_id']}:{next_q['question_id']}"),
            InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"skip:{next_q['user_id']}:{next_q['question_id']}")
        ],
        [
            InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete:{next_q['user_id']}:{next_q['question_id']}"),
            InlineKeyboardButton(text="‚õî –ó—É–ø–∏–Ω–∏—Ç–∏—Å—å", callback_data="stop_answering")
        ]
    ])
    await bot.send_message(admin_id, text, parse_mode="HTML", reply_markup=buttons)

# ===== –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–ê–ù–°–£ =====
@router.callback_query(F.data == "restart_answering")
async def restart_answering(callback: CallbackQuery):
    await callback.answer("üîÑ –°–µ–∞–Ω—Å —Ä–æ–∑–ø–æ—á–∞—Ç–æ –∑–∞–Ω–æ–≤–æ.")
    await send_next_question(callback.from_user.id)


# üü¢ –ö–æ–º–∞–Ω–¥–∞ /–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ (–ø—ñ–¥—Ç—Ä–∏–º—É—î /–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ /msg)
@router.message(lambda m: m.text and (m.text.startswith("/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è") or m.text.startswith("/msg")))
async def send_message_to_user(message: Message):
    admin_id = message.from_user.id

    # üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∞–¥–º—ñ–Ω–æ–º
    admin_check = supabase.table("admins").select("admin_id").eq("admin_id", admin_id).execute()
    if not admin_check.data:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    # –†–æ–∑–±—ñ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤: /–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è <—Ü—ñ–ª—å> <—Ç–µ–∫—Å—Ç>
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        # –£–Ω–∏–∫–∞—î–º–æ –∫—É—Ç–æ–≤–∏—Ö –¥—É–∂–æ–∫, –±–æ –±–æ—Ç –º–∞—î HTML-–ø–∞—Ä—Å–µ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è user_id –∞–±–æ @—é–∑–µ—Ä–Ω–µ–π–º —Ç–µ–∫—Å—Ç")
        return

    target = parts[1].strip()
    text = parts[2].strip()
    if not text:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return

    # üéØ –ó–Ω–∞—Ö–æ–¥–∏–º–æ target_id —É —Ç–∞–±–ª–∏—Ü—ñ users
    target_id = None
    try:
        if target.startswith("@"):
            username = target.lstrip("@")
            user_lookup = supabase.table("users").select("user_id").eq("telegram_username", username).execute()
            if not user_lookup.data:
                await message.answer("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º @username —É –±–∞–∑—ñ.")
                return
            target_id = user_lookup.data[0]["user_id"]
        else:
            # —Å–ø—Ä–æ–±–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ int ‚Äî —è–∫—â–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
            try:
                target_id = int(target)
            except ValueError:
                await message.answer("‚ö†Ô∏è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º –∞–±–æ @username.")
                return

            # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤ users
            user_lookup = supabase.table("users").select("user_id").eq("user_id", target_id).execute()
            if not user_lookup.data:
                await message.answer("‚ö†Ô∏è –£ –±–∞–∑—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID.")
                return
    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ users")
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return

    # ‚úâÔ∏è –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –ï–ö–†–ê–ù–£–Ñ–ú–û HTML-—Å–∏–º–≤–æ–ª–∏
    safe_text = html.escape(text)
    message_to_send = f"üì© <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:</b>\n\n{safe_text}"
    try:
        # —è–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ parse_mode="HTML" –±–æ –º–∏ –≤–∂–µ –µ–∫—Ä–∞–Ω—ñ—Ä—É–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç
        await bot.send_message(chat_id=target_id, text=message_to_send, parse_mode="HTML")
        await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except TelegramForbiddenError:
        await message.answer("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ –∑–∞–∫—Ä–∏–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
    except TelegramBadRequest as e:
        logging.exception("TelegramBadRequest –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    except Exception as e:
        logging.exception("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        await message.answer(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

  
# üü¢ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@router.message(Form.category)
async def handle_category_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    category = message.text.strip()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category}")

    if category == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.category")
        await show_main_menu(message, state)
        return

    if category not in CATEGORIES:
        await message.answer(
            "‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES.keys()] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
    subscription_status = await check_subscription(user_id)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_status}")
    if not subscription_status:
        await message.answer(
            "ü¶ú–°–∫–≤–∞–∞–∫! –ü–æ—Ä—É—à–µ–Ω–Ω—è! –ó–∞ –±–æ—Ä—Ç!‚ö†Ô∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
            "<a href='https://t.me/+bTmE3LOAMFI5YzBi'>–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∫–∞–Ω–∞–ª—É</a> —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)'.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")]],
                resize_keyboard=True
            )
        )
        await state.clear()
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —É —Å—Ç–∞–Ω
    await state.update_data(category=category)
    category_config = CATEGORIES[category]

    # üîπ –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ–ø–æ—Å—Ç
    if category_config.get("repost", False):
        await message.answer(
            f"ü¶ú–°–∫–≤–∞–∞–∫! –ö–∞—Ç–µ–≥–æ—Ä—ñ—è <b>{category}</b>: {category_config['description']}\n"
            f"<b>–î–µ —Ç–∏ –ø–æ–¥—ñ–ª–∏–≤—Å—è(–ª–∞—Å—å) —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é?</b>\n\n",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–æ—Ü–º–µ—Ä–µ–∂–∞"), KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.repost_platform)

    # üîπ –Ø–∫—â–æ —Ä–µ–ø–æ—Å—Ç –ù–ï –ø–æ—Ç—Ä—ñ–±–µ–Ω
    else:
        await message.answer(
            f"ü¶ú–°–∫–≤–∞–∞–∫! –ö–∞—Ç–µ–≥–æ—Ä—ñ—è <b>{category}</b>: {category_config['description']}\n\n",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.update_data(repost_platform="", repost_link="")
        await state.set_state(Form.description)


# üü¢ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è —Ä–µ–ø–æ—Å—Ç—É
@router.message(Form.repost_platform)
async def process_repost_platform(message: Message, state: FSMContext):
    platform = message.text.strip()
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ —Å–ø–æ—Å—ñ–± –ø–æ—à–∏—Ä–µ–Ω–Ω—è: {platform}")

    if platform == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.repost_platform")
        await show_main_menu(message, state)
        return

    if platform not in ["–°–æ—Ü–º–µ—Ä–µ–∂–∞", "–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º"]:
        await message.answer(
            "‚ö†Ô∏è <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:</b> '–°–æ—Ü–º–µ—Ä–µ–∂–∞' –∞–±–æ '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º'.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–æ—Ü–º–µ—Ä–µ–∂–∞"), KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    await state.update_data(repost_platform=platform)
    if platform == "–°–æ—Ü–º–µ—Ä–µ–∂–∞":
        await message.answer(
            f"ü¶ú–°–∫–≤–∞–∞–∫!<b>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—É —É —è–∫—ñ–π –≤–∏ –æ–ø—É–±–ª—ñ–∫—É–≤–∞–ª–∏ –¥–æ–ø–∏—Å.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.repost_link)
    else:
        await message.answer(
            "‚úÖ <b>–î—è–∫—É—î–º–æ! –°–∫–≤–∞–∞–∞–∫!ü¶ú –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—à–∏—Ä–µ–Ω–Ω—è. –û—á—ñ–∫—É–π—Ç–µ!</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await message.answer(
            f"‚úÖ <b>ü¶ú–°–∫–≤–∞–∞–∫! –ü–æ–∫–∏ –º–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:</b>\n\n"
            f"1. <b>–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å</b>\n"
            f"2. <b>–õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ</b>\n",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.update_data(repost_link="")
        await state.set_state(Form.description)


# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ø–æ—Å—Ç
@router.message(Form.repost_link)
async def process_repost_link(message: Message, state: FSMContext):
    repost_link = message.text.strip()
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–ø–∏—Å: {repost_link}")

    if repost_link == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.repost_link")
        await show_main_menu(message, state)
        return

    pattern = re.compile(
        r'^(https?://)?'
        r'([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.[a-zA-Z]{2,}'
        r'(/.*)?$|'
        r'^@[a-zA-Z0-9_]{5,}$',
        re.UNICODE
    )
    if not pattern.match(repost_link):
        await message.answer(
            "‚ö†Ô∏è <b>ü¶ú–°–∫–≤–∞–∞–∫! –ü–æ–º–∏–ª–∫–∞! –ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º.</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ @–Ω—ñ–∫–Ω–µ–π–º –∞–±–æ –ø–æ–≤–Ω–µ URL.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    await state.update_data(repost_link=repost_link)
    # –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫ –±—ñ–ª—å—à–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î
    await state.set_state(Form.description)


# üü¢ –û–ø–∏—Å —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
@router.message(Form.description)
async def get_description_and_socials(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∞–Ω–∫–µ—Ç—É: {message.text}")

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    if message.text and message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.description")
        await state.clear()   # ‚ùóÔ∏è–æ—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ
        await show_main_menu(message, state)
        return

    if not message.text:
        await message.answer(
            "ü¶ú–°–∫–≤–∞–∞–∫! <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True,
            ),
        )
        return

    try:
        description_text = message.text.strip()
        # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–ø–∏—Å —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
        await state.update_data(raw_description=description_text, photos=[])

        await message.answer(
            "üì∏ <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–æ –≤–∞—à–æ–≥–æ –ø–æ—Å—Ç–∞ (–ø—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —ó—Ö –¥–æ –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ'.</b>ü¶ú–°–∫–≤–∞–∞–∫!",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
                ],
                resize_keyboard=True,
            ),
        )
        await state.set_state(Form.images)
    except Exception as e:
        logging.error(
            f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è user_id={user_id}: {str(e)}\n{traceback.format_exc()}"
        )
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True,
            ),
        )
        await state.set_state(Form.images)


# üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å (/done)
@router.message(StateFilter(Form.images), Command("done"))
async def done_images(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    category = data.get("category", "")

    if not photos:
        await message.answer("ü¶ú–°–∫–≤–∞–∞–∫!–í–∏ —â–µ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ‚ö†")
        return

    logging.info(
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–≤ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {len(photos)} —Ñ–æ—Ç–æ. –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}"
    )
    await finish_submission(message.from_user, state, photos)


# üü¢ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ —Ñ–æ—Ç–æ
@router.message(StateFilter(Form.images), F.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ")
async def submit_without_photos(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ'")
    await finish_submission(message.from_user, state, photos=[])


# üü¢ –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ –∫–æ–º–∞–Ω–¥ —É —Ü—å–æ–º—É —Å—Ç–∞–Ω—ñ
@router.message(StateFilter(Form.images))
async def get_images(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å—Ç–∞–Ω—ñ Form.images: {message.text or '–§–æ—Ç–æ'}"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if message.text and message.text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ù–∞–∑–∞–¥' —É —Å—Ç–∞–Ω—ñ Form.images")
        await state.clear()   # ‚ùóÔ∏è–æ—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ñ–æ—Ç–æ
        await show_main_menu(message, state)
        return

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ"
    if message.text and message.text.strip() == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ":
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ'")
        await finish_submission(message.from_user, state, photos=[])
        return

    # –ö–æ–º–∞–Ω–¥–∞ /done
    if message.text and message.text.strip().lower() == "/done":
        data = await state.get_data()
        photos = data.get("photos", [])
        category = data.get("category", "")

        if not photos:
            await message.answer("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.")
            return

        logging.info(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–≤–µ—Ä—à–∏–≤ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {len(photos)} —Ñ–æ—Ç–æ. –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}"
        )
        await finish_submission(message.from_user, state, photos)
        return

    # –§–æ—Ç–æ
    if message.photo:
        data = await state.get_data()
        photos = data.get("photos", [])
        photos.append(message.photo[-1].file_id)
        logging.info(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {message.photo[-1].file_id}"
        )

        if len(photos) >= 5:
            await finish_submission(message.from_user, state, photos)
        else:
            await state.update_data(photos=photos)
            await message.answer(
                f"ü¶ú–°–∫–≤–∞–∞–∫! <b>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æüì∏ ({len(photos)}/5). –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /done.</b>",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="/done"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True,
                ),
            )
        return

    # –Ø–∫—â–æ —â–æ—Å—å —ñ–Ω—à–µ
    await message.answer(
        "ü¶ú–°–∫–≤–∞–∞–∫!<b>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ' –∞–±–æ /done.</b>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ")],
                [KeyboardButton(text="/done"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True,
        ),
    )


# üü¢ /help
@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /–¥–æ–ø–æ–º–æ–≥–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    help_text = (
    "ü¶ú <b>–°–∫–≤–∞–∞–∞–∫! –¶–µ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –Ω–∞ –Ω–∞—à—ñ–π –¥–æ—à—Ü—ñ</b> <i>–ú–∏—Ç—Ü—ñ –Æ–ê</i>.\n\n"
    "<b>–Ø–∫ –ø—Ä–∞—Ü—é—î –Ω–∞—à–∞ –≥–∞–≤–∞–Ω—å:</b>\n"
    "1Ô∏è‚É£ <u>–û–±–µ—Ä–∏ –¥—ñ—é</u> –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø—ñ—Å–ª—è /start.\n"
    "2Ô∏è‚É£ –î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: –≤–∏–±–µ—Ä–∏ <b>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é</b>, –≤–∏–∫–æ–Ω–∞–π —É–º–æ–≤–∏ (—Ä–µ–ø–æ—Å—Ç üì© –∞–±–æ –ø–æ–¥—ñ–ª–∏—Å—å –∑ –¥—Ä—É–∑—è–º–∏, –ø—ñ–¥–ø–∏—Å–∫–∞ ‚úÖ).\n"
    "3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ –¥–∞–Ω—ñ <i>–æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º</i> ‚Äî –Ω—ñ–∫, –æ–ø–∏—Å, —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –ø–æ—Ç—ñ–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üñº(—è–∫—â–æ —î).\n"
    "4Ô∏è‚É£ –ß–µ–∫–∞–π –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–¥–º—ñ–Ω–æ–º. ‚è≥ –ù–µ –≥–æ–¥—É–π —á–∞–π–æ–∫ –±–∞–π–∫–∞–º–∏!\n\n"
    "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–∞—Ç—Ä–æ—Å—ñ–≤:</b> /rules\n"
    f"üì© <b>–ü–∏—Ç–∞–Ω–Ω—è –¥–æ –∫–∞–ø—ñ—Ç–∞–Ω—ñ–≤:</b> <code>{' ‚Ä¢ '.join(ADMIN_CONTACTS)}</code>"
)

    await message.answer(
        help_text,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(Form.main_menu)

# üü¢ –§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏
async def finish_submission(user: types.User, state: FSMContext, photos: list):
    data = await state.get_data()
    submission_id = str(uuid.uuid4())
    logging.info(f"–§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –≤—ñ–¥ user_id={user.id}, submission_id={submission_id}. –î–∞–Ω—ñ —Å—Ç–∞–Ω—É: {data}, –§–æ—Ç–æ: {photos}")

    if not data.get("category"):
        logging.error(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è user_id={user.id}: {data}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É —â–µ —Ä–∞–∑.")
        await state.clear()
        return

    description_text = data.get("raw_description", "–ù–µ–≤–∫–∞–∑–∞–Ω–æ")
    user_display_name = user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    user_link = f'<a href="tg://user?id={user.id}">{user_display_name}</a>'
    text = (
        f"üì• <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥</b> {user_link}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {data['category']}\n"
        f"<b>–°–ø–æ—Å—ñ–± –ø–æ—à–∏—Ä–µ–Ω–Ω—è:</b> {data.get('repost_platform', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–ø–∏—Å:</b> {data.get('repost_link', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–û–ø–∏—Å:</b>\n{description_text}\n"
        f"#public"
    )

    try:
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç {ADMIN_CHAT_ID}")
        if photos:
            media = [InputMediaPhoto(media=photos[0], caption=text, parse_mode="HTML")]
            for p in photos[1:]:
                media.append(InputMediaPhoto(media=p))
            media_message = await bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media)
            media_message_ids = [msg.message_id for msg in media_message]
        else:
            media_message_ids = []
            media_message = await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode="HTML")
            media_message_ids.append(media_message.message_id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{user.id}:{submission_id}")
        keyboard.button(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏", callback_data=f"reject:{user.id}:{submission_id}")
        keyboard.button(text="üìù –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—Ä—É—á–Ω—É", callback_data=f"manual:{user.id}:{submission_id}")
        markup = keyboard.as_markup()


        await bot.send_message(chat_id=ADMIN_CHAT_ID, text="üîé <b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:</b>", parse_mode="HTML", reply_markup=markup)
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º (BadRequest). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
        await state.clear()
        return
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É {ADMIN_CHAT_ID}: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω–∞–º (Forbidden). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
        await state.clear()
        return
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
        await state.clear()
        return

    try:
        submission_data = {
            "user_id": user.id,
            "username": user_display_name,
            "category": data["category"],
            "repost_platform": data.get("repost_platform", ""),
            "repost_link": data.get("repost_link", ""),
            "description": description_text,
            "images": photos if photos else [],
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat(),
            "submission_id": submission_id,
            "media_message_ids": media_message_ids if media_message_ids else []
        }
        logging.info(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ Supabase: {submission_data}")
        result = supabase.table("submissions").insert(submission_data).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ Supabase: {result.data}")

        if not result.data:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É –≤ Supabase –¥–ª—è user_id={user.id}, submission_id={submission_id}. –î–∞–Ω—ñ: {submission_data}")
            await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
            await state.clear()
            return

        logging.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ Supabase: {result.data}")
        await bot.send_message(user.id, "ü¶ú–°–∫–≤–∞–∞–∞–∫! <b>–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!</b>", parse_mode="HTML")
        await state.clear()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ Supabase: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {str(e)}. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@AdminUsername</code>.", parse_mode="HTML")
        await state.clear()
        return

# üü¢ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É
@router.callback_query(lambda c: c.data.startswith("manual:"))
async def manual_post(callback: CallbackQuery):
    logging.info(f"Callback manual –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]

    try:
        # ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        result = (
            supabase.table("submissions")
            .update({
                "status": "manual",
                "moderated_at": datetime.utcnow().isoformat(),
                "moderator_id": callback.from_user.id
            })
            .eq("user_id", user_id)
            .eq("submission_id", submission_id)
            .execute()
        )

        if not result.data:
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏. –ú–æ–∂–ª–∏–≤–æ, —ó—ó –≤–∂–µ –≤–∏–¥–∞–ª–∏–ª–∏.")
            await callback.answer()
            return

        # ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º —Ç–∞ —é–∑–µ—Ä—É
        await callback.message.edit_text("üìù <b>–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π —Ä–æ–∑–≥–ª—è–¥.</b>", parse_mode="HTML")
        await bot.send_message(user_id, "ü¶ú–°–∫–≤–∞–∞–∞–∫! <b>–í–∞—à—É –∑–∞—è–≤–∫—É —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ ‚Äî –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –º–∏ –æ–ø—É–±–ª—ñ–∫—É—î–º —ó—ó!</b>", parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ 'manual': {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
        await callback.answer()



# üü¢ –°—Ö–≤–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É
@router.callback_query(lambda c: c.data.startswith("approve:"))
async def approve_post(callback: CallbackQuery):
    logging.info(f"Callback approve –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} —Å—Ö–≤–∞–ª–∏–≤ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∑–∞—è–≤–∫–∞
        check_submission = (
            supabase.table("submissions")
            .select("*")
            .eq("user_id", user_id)
            .eq("submission_id", submission_id)
            .execute()
        )
        if not check_submission.data:
            await callback.message.edit_text("‚ö†Ô∏è –ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.")
            await callback.answer()
            return

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏
        result = (
            supabase.table("submissions")
            .update({
                "status": "approved",
                "moderated_at": datetime.utcnow().isoformat(),
                "moderator_id": callback.from_user.id
            })
            .eq("user_id", user_id)
            .eq("submission_id", submission_id)
            .execute()
        )

        if not result.data:
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —ñ—Å–Ω—É—î –∑–∞—è–≤–∫–∞.")
            await callback.answer()
            return

        await asyncio.sleep(0.5)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏
        submission = (
            supabase.table("submissions")
            .select("*")
            .eq("user_id", user_id)
            .eq("submission_id", submission_id)
            .eq("status", "approved")
            .execute()
        )

        if not submission.data:
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—Ö–≤–∞–ª–µ–Ω—É –∑–∞—è–≤–∫—É. –ú–æ–∂–ª–∏–≤–æ, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–µ –≤—ñ–¥–±—É–ª–æ—Å—è.")
            await callback.answer()
            return

        data = submission.data[0]
        category_config = CATEGORIES.get(data.get('category'), {})
        category_hashtag = category_config.get('hashtag', "")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å
        if category_config.get("anonymous", False):
            author_text = "–î—ñ—Ä—è–≤–∏–π –ß–µ—Ä–µ–ø"
        else:
            user_display_name = data.get('username') or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            author_text = f'<a href="tg://user?id={user_id}">{html.escape(user_display_name)}</a>'

        # –ü—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ None
        description = data.get("description") or "‚Äî –±–µ–∑ –æ–ø–∏—Å—É ‚Äî"

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞ (—Ö–µ—à—Ç–µ–≥ –≤ –∫—ñ–Ω—Ü—ñ, —è–∫—â–æ —î)
        post_text = f"{description}\n\n<b>–í–ª–∞—Å–Ω–∏–∫ —Ü—å–æ–≥–æ —Å–∫–∞—Ä–±—É</b>: {author_text}"
        if category_hashtag:
            post_text += f"\n\n{category_hashtag}"

        # –û–±–º–µ–∂–µ–Ω–Ω—è Telegram: caption –¥–ª—è —Ñ–æ—Ç–æ/–º–µ–¥—ñ–∞ –≥—Ä—É–ø–∏ ‚Äî –¥–æ ~1024 —Å–∏–º–≤–æ–ª—ñ–≤,
        # –∞ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ 4096 —Å–∏–º–≤–æ–ª—ñ–≤. –ü—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—è.
        if len(post_text) > 4096:
            logging.warning(f"post_text –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π ({len(post_text)}). –¢—Ä–∏–º–∞—î–º–æ –º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª—ñ–≤.")
            post_text = post_text[:4093] + "..."

        images = data.get("images") or []

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        if images:
            # –Ø–∫—â–æ caption –ø–æ–º—ñ—Ä–Ω–∏–π ‚Äî –¥–æ–¥–∞—î–º–æ —è–∫ caption –¥–æ –ø–µ—Ä—à–æ–≥–æ —Ñ–æ—Ç–æ
            if len(post_text) <= 1024:
                media = [InputMediaPhoto(media=images[0], caption=post_text, parse_mode="HTML")]
                for photo in images[1:]:
                    media.append(InputMediaPhoto(media=photo))
                await bot.send_media_group(chat_id=MAIN_CHAT_ID, media=media)
            else:
                # –Ø–∫—â–æ caption –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π –¥–ª—è caption ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥–∞–ª–µ—Ä–µ—é –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É,
                # –ø–æ—Ç—ñ–º –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Ç–µ–∫—Å—Ç.
                media = [InputMediaPhoto(media=images[0])]
                for photo in images[1:]:
                    media.append(InputMediaPhoto(media=photo))
                await bot.send_media_group(chat_id=MAIN_CHAT_ID, media=media)
                await bot.send_message(chat_id=MAIN_CHAT_ID, text=post_text, parse_mode="HTML")
        else:
            await bot.send_message(chat_id=MAIN_CHAT_ID, text=post_text, parse_mode="HTML")

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await callback.message.edit_text("ü¶ú–°–∫–≤–∞–∞–∞–∫! –ß—É–¥–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ <b>–ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—ñ!</b>", parse_mode="HTML")
        try:
            await bot.send_message(user_id, "ü¶ú–°–∫–≤–∞–∞–∞–∫! <b>–í–∞—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—ñ!</b>", parse_mode="HTML")
        except Exception as send_err:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {send_err}")

        await callback.answer()

    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç (BadRequest).")
        await callback.answer()
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É.")
        await callback.answer()
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()



# üü¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É
@router.callback_query(lambda c: c.data.startswith("reject:"))
async def reject_post(callback: CallbackQuery):
    logging.info(f"Callback reject –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")

    try:
        # ‚ùå –í–∏–¥–∞–ª—è—î–º–æ –∑–∞—è–≤–∫—É –∑ –±–∞–∑–∏
        logging.info(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∑ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        result = supabase.table("submissions").delete().eq("user_id", user_id).eq("submission_id", submission_id).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è Supabase: {result.data}")

        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await callback.message.edit_text("‚ùå <b>–ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ü¶ú–°–∫–≤–∞–∞–∞–∫!.</b>", parse_mode="HTML")
        await bot.send_message(user_id, "ü¶ú–°–∫–≤–∞–∞–∞–∫! <b>–í–∞—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.</b> –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()


# üü¢ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤
@router.callback_query()
async def debug_callback(callback: CallbackQuery):
    logging.info(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ callback-–∑–∞–ø–∏—Ç: {callback.data} –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}")
    await callback.answer("–û—Ç—Ä–∏–º–∞–Ω–æ callback, –∞–ª–µ –Ω–µ–º–∞—î –æ–±—Ä–æ–±–Ω–∏–∫–∞")

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@dp.errors()
async def error_handler(update, exception):
    logging.exception(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {getattr(update, 'update_id', '–Ω–µ–≤—ñ–¥–æ–º–µ')}: {exception}")
    try:
        if update and hasattr(update, 'callback_query'):
            await update.callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        elif update and hasattr(update, 'message'):
            await update.message.answer(
                "ü¶ú–°–∫–≤–∞–∞–∞–∫!<b>–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.</b> –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ <code>@tina263678e</code>.",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {str(e)}\n{traceback.format_exc()}")
    return True

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
dp.startup.register(on_startup)
