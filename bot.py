import os
import re
import time
import json
import random
import asyncio
import logging
import traceback
from datetime import datetime, timedelta
from typing import List
import uuid

from supabase import create_client, Client

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramNotFound,
    TelegramRetryAfter,
    TelegramForbiddenError,
)
from aiogram.types import (
    Message,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s:%(levelname)s - %(message)s')

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7645134499:AAFRfwsn7dr5W2m81gCJPwX944PRqk-sjEc"
ADMIN_CHAT_ID = -1002802098163
MAIN_CHAT_ID = -1002865535470

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
router = Router()
dp.include_router(router)  # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –æ–¥–∏–Ω —Ä–∞–∑

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ dp —ñ bot –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ webhook.py
__all__ = ["dp", "bot", "TOKEN"]

# üîå –î–∞–Ω—ñ –¥–ª—è Supabase
SUPABASE_URL = "https://clbcovdeoahrmxaoijyt.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYmNvdmRlb2Focm14YW9panl0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNTc4NTAsImV4cCI6MjA2NzczMzg1MH0.dxwJhTZ9ei4dOnxmCvGztb8pfUqTlprfd0-woF6Y-lY"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# üìã –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    message = State()

# üü¢ /start
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
    await state.set_state(Form.message)

# üü¢ –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@router.message(Form.message, F.text)
async def handle_message(message: Message, state: FSMContext):
    user_message = message.text
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_message}")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Supabase
    try:
        submission_id = str(uuid.uuid4())
        supabase.table("submissions").insert({
            "user_id": user_id,
            "username": message.from_user.username or message.from_user.first_name,
            "category": "–ó–∞–≥–∞–ª—å–Ω–µ",
            "description": user_message,
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat(),
            "submission_id": submission_id
        }).execute()
        logging.info(f"–ó–∞—è–≤–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ Supabase, submission_id={submission_id}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ Supabase: {e}")
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤.")
        return

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É
    try:
        sent_message = await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{message.from_user.username or message.from_user.first_name}:\n{user_message}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve_{user_id}_{submission_id}"),
                InlineKeyboardButton(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏", callback_data=f"reject_{user_id}_{submission_id}")
            ]])
        )
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ media_message_ids
        supabase.table("submissions").update({
            "media_message_ids": [sent_message.message_id]
        }).eq("submission_id", submission_id).execute()
        logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É, message_id={sent_message.message_id}")
        await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!")
        await state.clear()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É: {e}")
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤.")

# üü¢ –û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤ (—Å—Ö–≤–∞–ª–µ–Ω–Ω—è)
@router.callback_query(F.data.startswith("approve_"))
async def handle_approve(query: CallbackQuery):
    logging.info(f"Callback –æ—Ç—Ä–∏–º–∞–Ω–æ: data={query.data}, from_user={query.from_user.id}")
    parts = query.data.split("_", 2)
    user_id = int(parts[1])
    submission_id = parts[2]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Supabase
    try:
        submission = supabase.table("submissions").select("description").eq("submission_id", submission_id).eq("user_id", user_id).execute()
        logging.info(f"Supabase –∑–∞–ø–∏—Ç: submission_id={submission_id}, user_id={user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç={submission.data}")
        if not submission.data:
            logging.error(f"–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: submission_id={submission_id}, user_id={user_id}")
            await query.message.edit_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            await query.answer()
            return
        user_message = submission.data[0]["description"]
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Supabase: {user_message}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑ Supabase: {e}")
        await query.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await query.answer()
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ
    try:
        chat_member = await bot.get_chat_member(chat_id=MAIN_CHAT_ID, user_id=bot.id)
        if not chat_member.can_post_messages:
            logging.error(f"–ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–∞–Ω–∞–ª {MAIN_CHAT_ID}")
            await query.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await query.answer()
            return
        logging.info(f"–ë–æ—Ç –º–∞—î –ø—Ä–∞–≤–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–∞–Ω–∞–ª {MAIN_CHAT_ID}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—Ä–∞–≤ —É –∫–∞–Ω–∞–ª—ñ {MAIN_CHAT_ID}: {e}")
        await query.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—Ä–∞–≤: {e}")
        await query.answer()
        return

    # –ü—É–±–ª—ñ–∫—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª –∑ —è–≤–Ω–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    try:
        sent_message = await bot.send_message(
            chat_id=MAIN_CHAT_ID,
            text=user_message,
            disable_notification=False
        )
        logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª {MAIN_CHAT_ID}, message_id={sent_message.message_id}")
        supabase.table("submissions").update({
            "status": "approved",
            "moderated_at": datetime.utcnow().isoformat(),
            "moderator_id": query.from_user.id
        }).eq("submission_id", submission_id).execute()
        logging.info(f"–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ Supabase, submission_id={submission_id}")
        await query.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
        await bot.send_message(user_id, "üéâ –í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É {MAIN_CHAT_ID}: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –∫–∞–Ω–∞–ª {MAIN_CHAT_ID}: {e}, traceback={traceback.format_exc()}")
        await query.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
    await query.answer()

# üü¢ –û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤ (–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è)
@router.callback_query(F.data.startswith("reject_"))
async def handle_reject(query: CallbackQuery):
    logging.info(f"Callback –æ—Ç—Ä–∏–º–∞–Ω–æ: data={query.data}, from_user={query.from_user.id}")
    parts = query.data.split("_", 2)
    user_id = int(parts[1])
    submission_id = parts[2]
    
    try:
        supabase.table("submissions").update({
            "status": "rejected",
            "moderated_at": datetime.utcnow().isoformat(),
            "moderator_id": query.from_user.id,
            "rejection_reason": "–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º"
        }).eq("submission_id", submission_id).execute()
        logging.info(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞, submission_id={submission_id}")
        await query.message.reply_text("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        await bot.send_message(user_id, "üòî –í–∞—à –ø–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ: –ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ: {e}")
        await query.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")
    await query.answer()

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@dp.error()
async def error_handler(update, exception):
    logging.exception(f"–í–∏–Ω—è—Ç–æ–∫: {exception}")
    return True
