import os
import re
import time
import json
import random
import asyncio
import logging
import traceback
from datetime import datetime, timedelta
from typing import List  

from supabase import create_client, Client

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramNotFound,
    TelegramRetryAfter,
)
from aiogram.types import (
    Message,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,  
    error_event,
    ReplyKeyboardRemove, 
)

from aiogram.types.error_event import ErrorEvent

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7645134499:AAFRfwsn7dr5W2m81gCJPwX944PRqk-sjEc"
ADMIN_CHAT_ID = -1002802098163  
MAIN_CHAT_ID = -1002865535470

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bobot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
router = Router()  

# üîå –î–∞–Ω—ñ –¥–ª—è Supabase
SUPABASE_URL = "https://clbcovdeoahrmxaoijyt.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYmNvdmRlb2Focm14YW9panl0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNTc4NTAsImV4cCI6MjA2NzczMzg1MH0.dxwJhTZ9ei4dOnxmCvGztb8pfUqTlprfd0-woF6Y-lY"

supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# ‚úÖ FSM
class FSMSubmission(StatesGroup):
    waiting_for_text = State()

# üü° /submit
@router.message(Command("submit"))
async def start_submission(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏:")
    await state.set_state(FSMSubmission.waiting_for_text)

# ‚úâÔ∏è –ü—Ä–∏–π–º–∞—î–º–æ —Ç–µ–∫—Å—Ç
@router.message(FSMSubmission.waiting_for_text)
async def receive_submission_text(message: Message, state: FSMContext, bot: Bot):
    submission_id = str(uuid.uuid4())
    user_id = message.from_user.id
    text = message.text.strip()

    await state.clear()

    await message.answer("‚úÖ –î—è–∫—É—é! –í–∞—à—É –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve:{user_id}:{submission_id}"),
            InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{user_id}:{submission_id}")
        ]
    ])

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–º‚Äô—è—Ç—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ ‚Äî —É –±–∞–∑—É)
    message.bot.submissions = getattr(message.bot, "submissions", {})
    message.bot.submissions[submission_id] = {
        "user_id": user_id,
        "text": text,
        "username": message.from_user.username or f"id{user_id}"
    }

    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üÜï –ó–∞—è–≤–∫–∞ –≤—ñ–¥ @{message.from_user.username or user_id}:\n\n{text}",
        reply_markup=keyboard
    )

# ‚úÖ –°—Ö–≤–∞–ª–µ–Ω–Ω—è
@router.callback_query(F.data.startswith("approve:"))
async def approve_submission(callback: CallbackQuery, bot: Bot):
    try:
        _, user_id_str, submission_id = callback.data.split(":")
        user_id = int(user_id_str)

        data = bot.submissions.get(submission_id)
        if not data:
            await callback.message.edit_text("‚ö†Ô∏è –ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–æ–Ω–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞.")
            return

        # –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ –∫–∞–Ω–∞–ª
        post_text = (
            f"üì¢ <b>–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤—ñ–¥ @{data['username']}:</b>\n\n"
            f"{data['text']}\n\n"
            f"#public"
        )

        await bot.send_message(CHANNEL_ID, post_text, parse_mode=ParseMode.HTML)
        await bot.send_message(user_id, "üéâ –í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ!")

        await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        bot.submissions.pop(submission_id, None)

    except Exception as e:
        logging.error(f"‚ùå approve_submission error: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏.")

    await callback.answer()

# ‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
@router.callback_query(F.data.startswith("reject:"))
async def reject_submission(callback: CallbackQuery, bot: Bot):
    try:
        _, user_id_str, submission_id = callback.data.split(":")
        user_id = int(user_id_str)

        data = bot.submissions.get(submission_id)
        if data:
            await bot.send_message(user_id, "üòî –í–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            bot.submissions.pop(submission_id, None)

        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

    except Exception as e:
        logging.error(f"‚ùå reject_submission error: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏.")

    await callback.answer()

# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@dp.errors()
async def error_handler(update, exception):
    logging.exception(f"–í–∏–Ω—è—Ç–æ–∫: {exception}")
    return True

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ dp —ñ bot –¥–ª—è webhook.py
__all__ = ["dp", "bot", "TOKEN"]
