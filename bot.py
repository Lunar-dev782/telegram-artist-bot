import os
import re
import time
import json
import random
import asyncio
import logging
import traceback
from datetime import datetime, timedelta
from typing import List
import uuid

from supabase import create_client, Client
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter, CommandStart
from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramNotFound,
    TelegramRetryAfter,
    TelegramForbiddenError,
)
from aiogram.types import (
    Message,
    ContentType,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputMediaPhoto,
    ReplyKeyboardRemove,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s:%(levelname)s - %(message)s')

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7645134499:AAG5kuDHsUG-djs4qRjS7IX22UjzYKSXQHw"
ADMIN_CHAT_ID = -1002802098163
MAIN_CHAT_ID = -1002865535470
ADMIN_CONTACTS = ["@Admin1", "@Admin2"]

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
router = Router()
dp.include_router(router)

# üîå –î–∞–Ω—ñ –¥–ª—è Supabase
SUPABASE_URL = "https://clbcovdeoahrmxaoijyt.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNsYmNvdmRlb2Focm14YW9panl0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIxNTc4NTAsImV4cCI6MjA2NzczMzg1MH0.dxwJhTZ9ei4dOnxmCvGztb8pfUqTlprfd0-woF6Y-lY"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# üìã –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Form(StatesGroup):
    main_menu = State()
    category = State()
    repost_platform = State()
    repost_link = State()
    description = State()
    images = State()
    question = State()
    answer = State()

# üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —ó—Ö —Ö–µ—à—Ç–µ–≥–∏
CATEGORIES = {
    "üí∏ –ü–ª–∞—Ç–Ω—ñ –ø–æ—Å–ª—É–≥–∏": {"description": "–ö–æ–º—ñ—à—ñ, –ø—Ä–∞–π—Å–∏, —Ä–µ–∫–ª–∞–º–∞. –†–µ–ø–æ—Å—Ç –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π.", "hashtag": "#–ü–ª–∞—Ç–Ω—ñ_–ø–æ—Å–ª—É–≥–∏"},
    "üì£ –°–∞–º–æ–ø—ñ–∞—Ä": {"description": "–ü—Ä–æ–º–æ—Ü—ñ—è –≤–∞—à–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É, –±–ª–æ–≥—É –∞–±–æ –ø—Ä–æ—Ñ—ñ–ª—é. –†–µ–ø–æ—Å—Ç –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π.", "hashtag": "#–°–∞–º–æ–ø—ñ–∞—Ä"},
    "üé≠ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ": {"description": "–Ü–≤–µ–Ω—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å–∏, –ª–æ—Ç–µ—Ä–µ—ó, DTIYS.", "hashtag": "#–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"},
    "üîç –ü–æ—à—É–∫ –∫—Ä–∏—Ç–∏–∫–∞ / –ø—Ä–∏—Ç–∏–∫–∞": {"description": "–®—É–∫–∞—î—à —Ñ—ñ–¥–±–µ–∫? –¢–æ–±—ñ —Å—é–¥–∏.", "hashtag": "#–ü–æ—à—É–∫_–∫—Ä–∏—Ç–∏–∫–∞"},
    "üì© –û–≥–æ–ª–æ—à–µ–Ω–Ω—è / –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è": {"description": "–û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è, –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è ‚Äî –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å. –†–µ–ø–æ—Å—Ç –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π.", "hashtag": "#–û–≥–æ–ª–æ—à–µ–Ω–Ω—è_–∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"},
    "‚ûï –Ü–Ω—à–µ": {"description": "–©–æ—Å—å, —â–æ –Ω–µ –≤–º—ñ—Å—Ç–∏–ª–æ—Å—å –≤ —ñ–Ω—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.", "hashtag": "#–Ü–Ω—à–µ"},
    "üêæ –ê–¥–æ–ø—Ç–∏": {"description": "–ü–æ—Å—Ç–∏ –ø—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤, —è–∫–∏—Ö –≤–∏ –ø—Ä–æ–ø–æ–Ω—É—î—Ç–µ –¥–ª—è –∞–¥–æ–ø—Ü—ñ—ó.", "hashtag": "#–ê–¥–æ–ø—Ç–∏"},
    "üßµ –†–µ–∫–≤–µ—Å—Ç–∏": {"description": "–ó–∞–ø–∏—Ç–∏ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ –∞–±–æ —ñ–Ω—à–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.", "hashtag": "#–†–µ–∫–≤–µ—Å—Ç–∏"}
}

# üü¢ –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫
async def cleanup_old_submissions():
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á—ñ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫")
            seven_days_ago = (datetime.utcnow() - timedelta(days=7)).isoformat()
            result = supabase.table("submissions").delete().lt("submitted_at", seven_days_ago).execute()
            logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ {len(result.data)} –∑–∞—è–≤–æ–∫, —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 7 –¥–Ω—ñ–≤")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
        await asyncio.sleep(3600)

# üü¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(chat_id=MAIN_CHAT_ID, user_id=user_id)
        logging.info(f"–°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {chat_member.status}")
        return chat_member.status in ["member", "creator", "administrator"]
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False
    except TelegramRetryAfter as e:
        logging.warning(f"–û–±–º–µ–∂–µ–Ω–Ω—è Telegram API, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥ –¥–ª—è user_id={user_id}")
        await asyncio.sleep(e.retry_after)
        return False
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        return False

# üü¢ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def show_main_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    try:
        subscription_status = await check_subscription(user_id)
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_status}")
        if not subscription_status:
            await message.answer(
                "‚ö†Ô∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
                "[–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É](https://t.me/+bTmE3LOAMFI5YzBi) —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)'.",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")]],
                    resize_keyboard=True
                )
            )
            return

        await message.answer(
            "üé® –í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ *–ú–∏—Ç—Ü—ñ –Æ–ê*! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton(text="üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")],
                    [KeyboardButton(text="‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_main_menu –¥–ª—è user_id={user_id}: {e}")
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")

# üü¢ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –æ—á–∏—â–µ–Ω–Ω—è
async def on_startup():
    asyncio.create_task(cleanup_old_submissions())

# üü¢ /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await show_main_menu(message, state)

@router.message(F.text.lower() == "start")
async def cmd_pochnimo(message: Message, state: FSMContext):
    await show_main_menu(message, state)

@router.message(F.text == "–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")
async def check_subscription_again(message: Message, state: FSMContext):
    await show_main_menu(message, state)

# üü¢ –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(Form.main_menu, F.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
@router.message(Command("rules"))
async def cmd_rules(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –∞–±–æ –∫–Ω–æ–ø–∫–∞ /–ø—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    rules_text = (
        "üìñ –û–∑–Ω–∞–π–æ–º—Å—è –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ *–ú–∏—Ç—Ü—ñ –Æ–ê*:\n\n"
        "üìú –ü—Ä–∞–≤–∏–ª–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π:\n"
        "1. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —É–º–æ–≤ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n"
        "2. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "3. –ù–µ –±—ñ–ª—å—à–µ 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å –Ω–∞ –ø–æ—Å—Ç.\n"
        "4. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ 2 –ø–æ—Å—Ç–∏ –Ω–∞ 7 –¥–Ω—ñ–≤.\n"
        "5. –ó—Ä–æ–±—ñ—Ç—å —Ä–µ–ø–æ—Å—Ç –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –≤ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –¥—Ä—É–∑—è–º.\n"
        "6. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ NSFW, –æ–±—Ä–∞–∑–ª–∏–≤–∏–π –∞–±–æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "7. –ê–¥–º—ñ–Ω–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º.\n\n"
        "üì© –ó –ø–∏—Ç–∞–Ω–Ω—è–º–∏: @AdminUsername\n"
        "üëâ [–î–æ–∫–ª–∞–¥–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞](https://telegra.ph/Pravyla-Mytci-UA)"
    )
    await message.answer(
        rules_text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )

# üü¢ –û–±—Ä–æ–±–∫–∞ "–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç"
@router.message(Form.main_menu, F.text == "üìù –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç")
async def handle_propose_post(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ—Å—Ç'")

    try:
        seven_days_ago = (datetime.utcnow() - timedelta(days=7)).isoformat()
        recent_submissions = supabase.table("submissions").select("submitted_at").eq("user_id", user_id).gte("submitted_at", seven_days_ago).execute()
        if len(recent_submissions.data) >= 2:
            await message.answer(
                "‚ö†Ô∏è –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 2 –∑–∞—è–≤–æ–∫ –Ω–∞ 7 –¥–Ω—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return

        await message.answer(
            "üé® –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES.keys()] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.category)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_propose_post –¥–ª—è user_id={user_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )

# üü¢ –û–±—Ä–æ–±–∫–∞ "–Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è"
@router.message(Form.main_menu, F.text == "‚ùì –Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")
async def handle_other_questions(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–Ü–Ω—à—ñ –ø–∏—Ç–∞–Ω–Ω—è'")
    await message.answer(
        f"‚ùì –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ —Ç—É—Ç, —ñ –Ω–∞—à—ñ –∞–¥–º—ñ–Ω–∏ –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏.\n\n"
        f"üì© –¢–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–ø—Ä—è–º—É:\n{' ‚Ä¢ '.join(ADMIN_CONTACTS)}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="Markdown"
    )
    await state.set_state(Form.question)

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–∏—Ç–∞–Ω—å –¥–æ –∞–¥–º—ñ–Ω—ñ–≤
@router.message(Form.question)
async def process_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    question = message.text.strip()
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è: {question}")

    if question == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await show_main_menu(message, state)
        return

    if not question:
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    try:
        question_id = str(uuid.uuid4())
        logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –∑ question_id={question_id}")

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_display_name = message.from_user.full_name
        user_link = f'<a href="tg://user?id={user_id}">{user_display_name}</a>'

        question_data = {
            "question_id": question_id,
            "user_id": user_id,
            "username": user_display_name,
            "question_text": question,
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat()
        }
        logging.info(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—é questions: {question_data}")
        try:
            result = supabase.table("questions").insert(question_data).execute()
            logging.info(f"–ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Supabase: {result.data}")
            if not result.data:
                raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤ Supabase")
        except Exception as supabase_error:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ Supabase –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è user_id={user_id}, question_id={question_id}: {str(supabase_error)}\n{traceback.format_exc()}")
            await message.answer(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è 'questions'. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return

        question_message = (
            f"‚ùì –ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {user_link} (ID: {user_id}):\n\n"
            f"{question}"
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer:{user_id}:{question_id}")
        markup = keyboard.as_markup()

        try:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=question_message,
                parse_mode="HTML",
                reply_markup=markup
            )
            logging.info(f"–ü–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É –¥–ª—è user_id={user_id}")
        except TelegramRetryAfter as e:
            logging.warning(f"–û–±–º–µ–∂–µ–Ω–Ω—è Telegram API, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥ –¥–ª—è user_id={user_id}")
            await asyncio.sleep(e.retry_after)
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=question_message,
                parse_mode="HTML",
                reply_markup=markup
            )
        except TelegramForbiddenError as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –¥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É: {str(e)}\n{traceback.format_exc()}")
            await message.answer(
                "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –º–æ–∂–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤ (–Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
        except TelegramBadRequest as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –¥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É: {str(e)}\n{traceback.format_exc()}")
            await message.answer(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return

        await message.answer(
            "‚úÖ –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω–∞–º! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.main_menu)
    except Exception as e:
        logging.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è: {str(e)}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )

# üü¢ –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"
@router.callback_query(lambda c: c.data.startswith("answer:"))
async def handle_answer_button(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    user_id = int(parts[1])
    question_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏' –¥–ª—è user_id={user_id}, question_id={question_id}")

    try:
        question = supabase.table("questions").select("*").eq("question_id", question_id).eq("user_id", user_id).execute()
        if not question.data or question.data[0]["status"] != "pending":
            await callback.message.edit_text("‚ö†Ô∏è –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
            await callback.answer()
            return

        await callback.message.answer(
            f"‚úâÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID: {user_id}):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
                resize_keyboard=True
            )
        )
        await state.update_data(user_id=user_id, question_id=question_id)
        await state.set_state(Form.answer)
        await callback.answer()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏' –¥–ª—è user_id={user_id}, question_id={question_id}: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–∏—Ç–∞–Ω–Ω—è. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()

# üü¢ –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω–∞
@router.message(Form.answer)
async def process_answer(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    answer_text = message.text.strip()
    data = await state.get_data()
    user_id = data.get("user_id")
    question_id = data.get("question_id")
    logging.info(f"–ê–¥–º—ñ–Ω {admin_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è user_id={user_id}, question_id={question_id}: {answer_text}")

    if answer_text == "‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.answer(
            "‚úÖ –û–±—Ä–æ–±–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
        return

    if not answer_text:
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
                resize_keyboard=True
            )
        )
        return

    try:
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await bot.send_message(
            chat_id=user_id,
            text=f"‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞: {answer_text}",
            parse_mode="HTML"
        )
        logging.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–∏—Ç–∞–Ω–Ω—è –≤ Supabase
        result = supabase.table("questions").update({
            "status": "answered",
            "answered_at": datetime.utcnow().isoformat(),
            "admin_id": admin_id,
            "answer_text": answer_text
        }).eq("question_id", question_id).eq("user_id", user_id).execute()
        logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–∏—Ç–∞–Ω–Ω—è –≤ Supabase: {result.data}")

        if not result.data:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤ Supabase –¥–ª—è user_id={user_id}, question_id={question_id}")
            await message.answer(
                "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.clear()
            return

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ–≤ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (ID: {user_id}) –∞–¥–º—ñ–Ω–æ–º {admin_id}:\n\n{answer_text}",
            parse_mode="HTML"
        )
        await message.answer(
            "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É!",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–º–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞).",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    await show_main_menu(message, state)

# üü¢ /help
@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /–¥–æ–ø–æ–º–æ–≥–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")
    help_text = (
        "‚ÑπÔ∏è –¶–µ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —É —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ *–ú–∏—Ç—Ü—ñ –Æ–ê*.\n\n"
        "–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
        "1Ô∏è‚É£ –û–±–µ—Ä–∏ –¥—ñ—é –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø—ñ—Å–ª—è /start.\n"
        "2Ô∏è‚É£ –î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: –≤–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –≤–∏–∫–æ–Ω–∞–π —É–º–æ–≤–∏ (—Ä–µ–ø–æ—Å—Ç –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥—Ä—É–∑—è–º, –ø—ñ–¥–ø–∏—Å–∫–∞, –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏).\n"
        "3Ô∏è‚É£ –ù–∞–¥—ñ—à–ª–∏ –¥–∞–Ω—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–Ω—ñ–∫, –æ–ø–∏—Å, —Å–æ—Ü–º–µ—Ä–µ–∂—ñ, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚Äî —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ).\n"
        "4Ô∏è‚É£ –ß–µ–∫–∞–π –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–¥–º—ñ–Ω–æ–º.\n\n"
        "üìú –ü—Ä–∞–≤–∏–ª–∞: /rules\n"
        f"üì© –ó –ø–∏—Ç–∞–Ω–Ω—è–º–∏: {' ‚Ä¢ '.join(ADMIN_CONTACTS)}"
    )
    await message.answer(
        help_text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )

# üü¢ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@router.message(Form.category, lambda message: message.text in CATEGORIES)
async def handle_category_selection(message: Message, state: FSMContext):
    user_id = message.from_user.id
    category = message.text
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category}")

    subscription_status = await check_subscription(user_id)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}: {subscription_status}")
    if not subscription_status:
        await message.answer(
            "‚ö†Ô∏è –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
            "[–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—É](https://t.me/+bTmE3LOAMFI5YzBi) —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(–ª–∞—Å—å)")]],
                resize_keyboard=True
            )
        )
        return

    await state.update_data(category=category)
    if category == "üì© –û–≥–æ–ª–æ—à–µ–Ω–Ω—è / –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è":
        await message.answer(
            f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category}: {CATEGORIES[category]['description']}\n\n"
            f"üìù –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n\n"
            f"1. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
            f"2. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ (Instagram: @–Ω—ñ–∫, Telegram: @–Ω—ñ–∫–Ω–µ–π–º, Site: https://blablabla)\n\n"
            f"üìå –ü—Ä–∏–∫–ª–∞–¥:\n"
            f"üñãÔ∏è –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n"
            f"–®—É–∫–∞—é –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –¥–ª—è –∫–æ–ª–∞–±–æ—Ä–∞—Ü—ñ—ó!\n\n"
            f"üåê –°–æ—Ü–º–µ—Ä–µ–∂—ñ:\n"
            f"Instagram: @artist\n"
            f"Telegram: @artist\n\n",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )
        await state.update_data(repost_platform="", repost_link="")
        await state.set_state(Form.description)
        return

    await message.answer(
        f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {category}: {CATEGORIES[category]['description']}\n\n"
        f"üîÑ –ó—Ä–æ–±–∏ —Ä–µ–ø–æ—Å—Ç [–Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏](https://t.me/community_link) —É —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ –¥—Ä—É–∑—è–º\n"
        f"üìù –ü–æ—Ç—ñ–º –∑–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É\n\n"
        f"–î–µ —Ç–∏ –ø–æ–¥—ñ–ª–∏–≤—Å—è(–ª–∞—Å—å) —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–æ—Ü–º–µ—Ä–µ–∂–∞"), KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        ),
        parse_mode="Markdown"
    )
    await state.set_state(Form.repost_platform)

# üü¢ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –¥–ª—è —Ä–µ–ø–æ—Å—Ç—É
@router.message(Form.repost_platform)
async def process_repost_platform(message: Message, state: FSMContext):
    platform = message.text.strip()
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ —Å–ø–æ—Å—ñ–± –ø–æ—à–∏—Ä–µ–Ω–Ω—è: {platform}")

    if platform not in ["–°–æ—Ü–º–µ—Ä–µ–∂–∞", "–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º"]:
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: '–°–æ—Ü–º–µ—Ä–µ–∂–∞' –∞–±–æ '–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º'.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°–æ—Ü–º–µ—Ä–µ–∂–∞"), KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –¥—Ä—É–∑—è–º")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )
        return

    await state.update_data(repost_platform=platform)
    if platform == "–°–æ—Ü–º–µ—Ä–µ–∂–∞":
        await message.answer(
            f"üîó –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≤—ñ–π –¥–æ–ø–∏—Å —É —Å–æ—Ü–º–µ—Ä–µ–∂—ñ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )
        await state.set_state(Form.repost_link)
    else:
        await message.answer(
            "‚úÖ –î—è–∫—É—î–º–æ! –ê–¥–º—ñ–Ω —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∫–∞–∑—ñ–≤. –û—á—ñ–∫—É–π—Ç–µ!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )
        await message.answer(
            f"üìù –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n\n"
            f"1. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
            f"2. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ (Instagram: @–Ω—ñ–∫, Telegram: @–Ω—ñ–∫–Ω–µ–π–º, Site: https://blablabla)\n\n"
            f"üìå –ü—Ä–∏–∫–ª–∞–¥:\n"
            f"üñãÔ∏è –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n"
            f"–ü—Ä–æ–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –¥–∏–∑–∞–π–Ω!\n\n"
            f"üåê –°–æ—Ü–º–µ—Ä–µ–∂—ñ:\n"
            f"Instagram: @artist\n"
            f"Telegram: @artist\n\n",
            parse_mode="Markdown"
        )
        await state.update_data(repost_link="")
        await state.set_state(Form.description)

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–µ–ø–æ—Å—Ç
@router.message(Form.repost_link)
async def process_repost_link(message: Message, state: FSMContext):
    repost_link = message.text.strip()
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–ø–∏—Å: {repost_link}")

    if repost_link == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await show_main_menu(message, state)
        return

    url_pattern = re.compile(
        r'^(https?://)?'
        r'([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.[a-zA-Z]{2,}'
        r'(/.*)?$'
    )
    if not url_pattern.match(repost_link):
        await message.answer(
            "‚ö†Ô∏è –ü–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–ø–∏—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://www.instagram.com/..., https://t.me/...).",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    await state.update_data(repost_link=repost_link)
    await message.answer(
        f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ —Ä–µ–ø–æ—Å—Ç! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:\n\n"
        f"1. –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å\n"
        f"2. –õ—ñ–Ω–∫–∏ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ (Instagram: @–Ω—ñ–∫, Telegram: @–Ω—ñ–∫–Ω–µ–π–º, Site: https://blablabla)\n\n"
        f"üìå –ü—Ä–∏–∫–ª–∞–¥:\n"
        f"üñãÔ∏è –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\n"
        f"–ü—Ä–æ–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –¥–∏–∑–∞–π–Ω!\n\n"
        f"üåê –°–æ—Ü–º–µ—Ä–µ–∂—ñ:\n"
        f"Instagram: @artist\n"
        f"Telegram: @artist\n\n",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        ),
        parse_mode="Markdown"
    )
    await state.set_state(Form.description)

# üü¢ –û–ø–∏—Å —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
@router.message(Form.description)
async def get_description_and_socials(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∞–Ω–∫–µ—Ç—É: {message.text}")

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await show_main_menu(message, state)
        return

    if not message.text:
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –æ–ø–∏—Å —Ç–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return

    try:
        description_text = message.text.strip()
        await state.update_data(raw_description=description_text)
        await message.answer(
            "üì∏ –•–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –∑–∞—è–≤–∫–∏? –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ"), KeyboardButton(text="–î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(Form.images)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è user_id={user_id}: {str(e)}\n{traceback.format_exc()}")
        await message.answer(
            "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )

# üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
@router.message(Form.images, F.text == "/done")
async def done_images(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    category = data.get("category", "")
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–≤ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: {photos}, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}")

    await finish_submission(message.from_user, state, photos)

# üü¢ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –±–µ–∑ —Ñ–æ—Ç–æ
@router.message(Form.images, F.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ")
async def submit_without_photos(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –±–µ–∑ —Ñ–æ—Ç–æ'")
    await finish_submission(message.from_user, state, photos=[])

# üü¢ –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
@router.message(Form.images, F.photo)
async def get_images(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {message.photo[-1].file_id}")

    if len(photos) >= 5:
        await finish_submission(message.from_user, state, photos)
    else:
        await state.update_data(photos=photos)
        await message.answer(
            f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ ({len(photos)}/5). –ù–∞–¥—ñ—à–ª–∏ —â–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ /done.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="/done"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )

# üü¢ –§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏
async def finish_submission(user: types.User, state: FSMContext, photos: list):
    data = await state.get_data()
    submission_id = str(uuid.uuid4())
    logging.info(f"–§—ñ–Ω–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –≤—ñ–¥ user_id={user.id}, submission_id={submission_id}. –î–∞–Ω—ñ —Å—Ç–∞–Ω—É: {data}, –§–æ—Ç–æ: {photos}")

    if not data.get("category"):
        logging.error(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –¥–ª—è user_id={user.id}: {data}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É —â–µ —Ä–∞–∑.")
        await state.clear()
        return

    description_text = data.get("raw_description", "–ù–µ–≤–∫–∞–∑–∞–Ω–æ")
    user_display_name = user.full_name
    user_link = f'<a href="tg://user?id={user.id}">{user_display_name}</a>'
    text = (
        f"üì• <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥</b> {user_link}\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {data['category']}\n"
        f"<b>–°–ø–æ—Å—ñ–± –ø–æ—à–∏—Ä–µ–Ω–Ω—è:</b> {data.get('repost_platform', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–ø–∏—Å:</b> {data.get('repost_link', '–ù–µ–≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–û–ø–∏—Å:</b>\n{description_text}\n"
        f"#public"
    )

    try:
        logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç {ADMIN_CHAT_ID}")
        if photos:
            media = [InputMediaPhoto(media=photos[0], caption=text, parse_mode="HTML")]
            for p in photos[1:]:
                media.append(InputMediaPhoto(media=p))
            media_message = await bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media)
            media_message_ids = [msg.message_id for msg in media_message]
        else:
            media_message_ids = []
            media_message = await bot.send_message(chat_id=ADMIN_CHAT_ID, text=text, parse_mode="HTML")
            media_message_ids.append(media_message.message_id)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"approve:{user.id}:{submission_id}")
        keyboard.button(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏", callback_data=f"reject:{user.id}:{submission_id}")
        markup = keyboard.as_markup()

        await bot.send_message(chat_id=ADMIN_CHAT_ID, text="üîé –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º (BadRequest). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        await state.clear()
        return
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —á–∞—Ç—É {ADMIN_CHAT_ID}: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–æ–∂–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞—è–≤–∫—É –∞–¥–º—ñ–Ω–∞–º (Forbidden). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        await state.clear()
        return
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —á–∞—Ç: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞–º. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        await state.clear()
        return

    try:
        submission_data = {
            "user_id": user.id,
            "username": user_display_name,
            "category": data["category"],
            "repost_platform": data.get("repost_platform", ""),
            "repost_link": data.get("repost_link", ""),
            "description": description_text,
            "images": photos if photos else [],
            "status": "pending",
            "submitted_at": datetime.utcnow().isoformat(),
            "submission_id": submission_id,
            "media_message_ids": media_message_ids if media_message_ids else []
        }
        logging.info(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ Supabase: {submission_data}")
        result = supabase.table("submissions").insert(submission_data).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ Supabase: {result.data}")

        if not result.data:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É –≤ Supabase –¥–ª—è user_id={user.id}, submission_id={submission_id}. –î–∞–Ω—ñ: {submission_data}")
            await bot.send_message(user.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
            await state.clear()
            return

        logging.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ Supabase: {result.data}")
        await bot.send_message(user.id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É!")
        await state.clear()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ Supabase: {str(e)}\n{traceback.format_exc()}")
        await bot.send_message(user.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {str(e)}. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.")
        await state.clear()
        return

# üü¢ –°—Ö–≤–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É
@router.callback_query(lambda c: c.data.startswith("approve:"))
async def approve_post(callback: CallbackQuery):
    logging.info(f"Callback approve –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} —Å—Ö–≤–∞–ª–∏–≤ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")

    try:
        logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        check_submission = supabase.table("submissions").select("*").eq("user_id", user_id).eq("submission_id", submission_id).execute()
        if not check_submission.data:
            logging.error(f"–ó–∞—è–≤–∫–∞ –¥–ª—è user_id={user_id}, submission_id={submission_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ submissions")
            await callback.message.edit_text("‚ö†Ô∏è –ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∞ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.")
            await callback.answer()
            return

        logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        result = supabase.table("submissions").update({
            "status": "approved",
            "moderated_at": datetime.utcnow().isoformat(),
            "moderator_id": callback.from_user.id
        }).eq("user_id", user_id).eq("submission_id", submission_id).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Supabase: {result.data}")

        if not result.data:
            logging.warning(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ –∂–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è user_id={user_id}, submission_id={submission_id}")
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —ñ—Å–Ω—É—î –∑–∞—è–≤–∫–∞.")
            await callback.answer()
            return

        await asyncio.sleep(0.5)
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏ –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        submission = supabase.table("submissions").select("*").eq("user_id", user_id).eq("submission_id", submission_id).eq("status", "approved").execute()
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏: {submission.data}")

        if not submission.data:
            logging.error(f"–°—Ö–≤–∞–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è user_id={user_id}, submission_id={submission_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            await callback.message.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—Ö–≤–∞–ª–µ–Ω—É –∑–∞—è–≤–∫—É. –ú–æ–∂–ª–∏–≤–æ, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–µ –≤—ñ–¥–±—É–ª–æ—Å—è.")
            await callback.answer()
            return

        data = submission.data[0]
        category_hashtag = CATEGORIES[data['category']]['hashtag']
        user_display_name = data['username']
        user_link = f'<a href="tg://user?id={user_id}">{user_display_name}</a>'
        post_text = (
            f"{category_hashtag}\n\n"
            f"{data['description']}\n\n"
            f"–ê–≤—Ç–æ—Ä –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {user_link}"
        )

        if data["images"]:
            media = [InputMediaPhoto(media=data["images"][0], caption=post_text, parse_mode="HTML")]
            for photo in data["images"][1:]:
                media.append(InputMediaPhoto(media=photo))
            await bot.send_media_group(chat_id=MAIN_CHAT_ID, media=media)
        else:
            await bot.send_message(chat_id=MAIN_CHAT_ID, text=post_text, parse_mode="HTML")

        await callback.message.edit_text("‚úÖ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—ñ!")
        await bot.send_message(user_id, "üéâ –í–∞—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—ñ!")
        await callback.answer()
    except TelegramBadRequest as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramBadRequest –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ –æ—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç (BadRequest).")
        await callback.answer()
    except TelegramForbiddenError as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ TelegramForbiddenError: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É {MAIN_CHAT_ID}: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É.")
        await callback.answer()
    except Exception as e:
        logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()

# üü¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É
@router.callback_query(lambda c: c.data.startswith("reject:"))
async def reject_post(callback: CallbackQuery):
    logging.info(f"Callback reject –æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}, –¥–∞–Ω—ñ: {callback.data}")
    parts = callback.data.split(":")
    user_id = int(parts[1])
    submission_id = parts[2]
    logging.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, submission_id={submission_id}")

    try:
        logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –≤ Supabase –¥–ª—è user_id={user_id}, submission_id={submission_id}")
        result = supabase.table("submissions").update({
            "status": "rejected",
            "moderated_at": datetime.utcnow().isoformat(),
            "moderator_id": callback.from_user.id,
            "rejection_reason": "–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º"
        }).eq("user_id", user_id).eq("submission_id", submission_id).execute()
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Supabase: {result.data}")
        await callback.message.edit_text("‚ùå –ü—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        await bot.send_message(user_id, "üòî –í–∞—à—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ü—Ä–∏—á–∏–Ω–∞: –ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º.")
        await callback.answer()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {str(e)}\n{traceback.format_exc()}")
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.")
        await callback.answer()

# üü¢ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤
@router.callback_query()
async def debug_callback(callback: CallbackQuery):
    logging.info(f"DEBUG: –û—Ç—Ä–∏–º–∞–Ω–æ callback-–∑–∞–ø–∏—Ç: {callback.data} –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ {callback.from_user.id}")
    await callback.answer("–û—Ç—Ä–∏–º–∞–Ω–æ callback, –∞–ª–µ –Ω–µ–º–∞—î –æ–±—Ä–æ–±–Ω–∏–∫–∞")

# üü¢ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@dp.errors()
async def error_handler(update, exception):
    logging.exception(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è {getattr(update, 'update_id', '–Ω–µ–≤—ñ–¥–æ–º–µ')}: {exception}")
    try:
        if update and hasattr(update, 'callback_query'):
            await update.callback_query.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        elif update and hasattr(update, 'message'):
            await update.message.answer(
                "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @AdminUsername.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {str(e)}\n{traceback.format_exc()}")
    return True

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
dp.startup.register(on_startup)
