import asyncio
import logging
import os
import traceback
from aiohttp import web
from aiogram.types import Update
from bot import dp, bot, TOKEN  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ dp, bot, TOKEN —ñ–∑ bot.py

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s:%(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω —Ç–∞ URL
WEBHOOK_URL = "https://telegram-artist-bot-f1nz.onrender.com"
WEBHOOK_PATH = "/webhook/telegram"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
async def on_startup(app):
    try:
        webhook_info = await bot.get_webhook_info()
        logging.info(f"–ü–æ—Ç–æ—á–Ω–∏–π –≤–µ–±—Ö—É–∫: {webhook_info.url}, pending_updates: {webhook_info.pending_update_count}")
        if not webhook_info.url or webhook_info.url != WEBHOOK_URL + WEBHOOK_PATH:
            await bot.delete_webhook(drop_pending_updates=True)  # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫
            await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
            logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}{WEBHOOK_PATH}")
        else:
            logging.info(f"‚úÖ Webhook –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_info.url}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≤–µ–±—Ö—É–∫–∞: {e}, traceback={traceback.format_exc()}")

# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –≤–µ–±—Ö—É–∫–∞
async def handle_webhook(request):
    if request.method == "POST":
        try:
            data = await request.json()
            update = Update(**data)
            logging.info(f"üì≤ –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: update_id={update.update_id}, type={update.__class__.__name__}, data={data}")
            await dp.feed_update(bot, update)
            return web.Response(status=200)
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {e}, traceback={traceback.format_exc()}")
            return web.Response(status=500)
    return web.Response(status=405)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 405 –¥–ª—è –Ω–µ-–ü–û–°–¢ –∑–∞–ø–∏—Ç—ñ–≤

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞ (Uptime Robot)
async def health_check(request):
    return web.json_response({"status": "running", "webhook": WEBHOOK_URL + WEBHOOK_PATH})

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get("/", health_check)  # –î–æ–¥–∞–Ω–æ GET –¥–ª—è / (–∑–¥–æ—Ä–æ–≤‚Äô—è)
    app.on_startup.append(on_startup)

    try:
        port = int(os.getenv("PORT", 8000))  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä—Ç —ñ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 8000
        logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {port}...")
        web.run_app(app, host="0.0.0.0", port=port)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä—É: {e}, traceback={traceback.format_exc()}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}, traceback={traceback.format_exc()}")
    finally:
        asyncio.run(bot.session.close())
