import asyncio
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update, Message

# –¢–æ–∫–µ–Ω —Ç–∞ URL
TOKEN = "7645134499:AAFRfwsn7dr5W2m81gCJPwX944PRqk-sjEc"
WEBHOOK_URL = "https://telegram-artist-bot.onrender.com"
WEBHOOK_PATH = "/webhook/telegram"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ‚úÖ –ü—Ä–æ—Å—Ç–∏–π —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message()
async def echo_message(message: Message):
    await message.answer(f"–¢–∏ –Ω–∞–ø–∏—Å–∞–≤: {message.text}")

# üìå –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
async def on_startup(app):
    try:
        await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
        logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}{WEBHOOK_PATH}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ webhook: {e}")

# üì• –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –≤—ñ–¥ Telegram
async def handle_webhook(request):
    try:
        data = await request.json()
        update = Update(**data)
        logging.info(f"üì≤ –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")
        await dp.feed_update(bot, update)
        return web.Response(status=200)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {e}")
        return web.Response(status=500)

# üîÑ Health check
async def health_check(request):
    return web.json_response({"status": "running", "webhook": WEBHOOK_URL + WEBHOOK_PATH})

# üöÄ –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
def main():
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get("/", health_check)
    app.on_startup.append(on_startup)

    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 8000...")
        web.run_app(app, host="0.0.0.0", port=8000)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    except (KeyboardInterrupt, SystemExit):
        logging.info("üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        bot.session.close()
